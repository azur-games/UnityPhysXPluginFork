//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace NVIDIA.PhysX {

public partial class PxJoint : PxBase {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal PxJoint(global::System.IntPtr cPtr, bool cMemoryOwn) : base(NativePINVOKE.PxJoint_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(PxJoint obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static new PxJoint getWrapper(global::System.IntPtr cPtr, bool cMemoryOwn) {
      var wrapper = WrapperCache.find(cPtr);
      if (!(wrapper is PxJoint)) {
          wrapper = new PxJoint(cPtr, cMemoryOwn);
          WrapperCache.add(cPtr, wrapper);
      }
      return wrapper as PxJoint;
  }

  public PxRigidActor getActor0() {
    global::System.IntPtr cPtr = NativePINVOKE.PxJoint_getActor0(swigCPtr);
    PxRigidActor ret = (cPtr == global::System.IntPtr.Zero) ? null : PxRigidActor.getWrapper(cPtr, false);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PxRigidActor getActor1() {
    global::System.IntPtr cPtr = NativePINVOKE.PxJoint_getActor1(swigCPtr);
    PxRigidActor ret = (cPtr == global::System.IntPtr.Zero) ? null : PxRigidActor.getWrapper(cPtr, false);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setActor0(PxRigidActor actor) {
    NativePINVOKE.PxJoint_setActor0(swigCPtr, PxRigidActor.getCPtr(actor));
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setActor1(PxRigidActor actor) {
    NativePINVOKE.PxJoint_setActor1(swigCPtr, PxRigidActor.getCPtr(actor));
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setLocalPose(PxJointActorIndex actor,  PxTransform  localPose) {
    NativePINVOKE.PxJoint_setLocalPose(swigCPtr, (int)actor,  localPose.swigCPtr );
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public  PxTransform  getLocalPose(PxJointActorIndex actor) {
        global::System.IntPtr ptr = NativePINVOKE.PxJoint_getLocalPose(swigCPtr, (int)actor);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
        //PxTransform ret = global::System.Runtime.InteropServices.Marshal.PtrToStructure<PxTransform>(ptr);
        PxTransform ret; unsafe { ret = *(PxTransform*)ptr; }
        return ret;
    }

  public  PxTransform  getRelativeTransform() {
        global::System.IntPtr ptr = NativePINVOKE.PxJoint_getRelativeTransform(swigCPtr);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
        //PxTransform ret = global::System.Runtime.InteropServices.Marshal.PtrToStructure<PxTransform>(ptr);
        PxTransform ret; unsafe { ret = *(PxTransform*)ptr; }
        return ret;
    }

  public  PxVec3  getRelativeLinearVelocity() {
        global::System.IntPtr ptr = NativePINVOKE.PxJoint_getRelativeLinearVelocity(swigCPtr);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
        //PxVec3 ret = global::System.Runtime.InteropServices.Marshal.PtrToStructure<PxVec3>(ptr);
        PxVec3 ret; unsafe { ret = *(PxVec3*)ptr; }
        return ret;
    }

  public  PxVec3  getRelativeAngularVelocity() {
        global::System.IntPtr ptr = NativePINVOKE.PxJoint_getRelativeAngularVelocity(swigCPtr);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
        //PxVec3 ret = global::System.Runtime.InteropServices.Marshal.PtrToStructure<PxVec3>(ptr);
        PxVec3 ret; unsafe { ret = *(PxVec3*)ptr; }
        return ret;
    }

  public void setBreakForce(float force, float torque) {
    NativePINVOKE.PxJoint_setBreakForce(swigCPtr, force, torque);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public void getBreakForce(out float force, out float torque) {
    NativePINVOKE.PxJoint_getBreakForce(swigCPtr, out force, out torque);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setConstraintFlags(PxConstraintFlag flags) {
    NativePINVOKE.PxJoint_setConstraintFlags(swigCPtr, (int)flags);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setConstraintFlag(PxConstraintFlag flag, bool value) {
    NativePINVOKE.PxJoint_setConstraintFlag(swigCPtr, (int)flag, value);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public PxConstraintFlag getConstraintFlags() {
    PxConstraintFlag ret = (PxConstraintFlag)NativePINVOKE.PxJoint_getConstraintFlags(swigCPtr);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setInvMassScale0(float invMassScale) {
    NativePINVOKE.PxJoint_setInvMassScale0(swigCPtr, invMassScale);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public float getInvMassScale0() {
    float ret = NativePINVOKE.PxJoint_getInvMassScale0(swigCPtr);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setInvInertiaScale0(float invInertiaScale) {
    NativePINVOKE.PxJoint_setInvInertiaScale0(swigCPtr, invInertiaScale);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public float getInvInertiaScale0() {
    float ret = NativePINVOKE.PxJoint_getInvInertiaScale0(swigCPtr);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setInvMassScale1(float invMassScale) {
    NativePINVOKE.PxJoint_setInvMassScale1(swigCPtr, invMassScale);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public float getInvMassScale1() {
    float ret = NativePINVOKE.PxJoint_getInvMassScale1(swigCPtr);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setInvInertiaScale1(float invInertiaScale) {
    NativePINVOKE.PxJoint_setInvInertiaScale1(swigCPtr, invInertiaScale);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public float getInvInertiaScale1() {
    float ret = NativePINVOKE.PxJoint_getInvInertiaScale1(swigCPtr);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PxConstraint getConstraint() {
    global::System.IntPtr cPtr = NativePINVOKE.PxJoint_getConstraint(swigCPtr);
    PxConstraint ret = (cPtr == global::System.IntPtr.Zero) ? null : PxConstraint.getWrapper(cPtr, false);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override void release() {
    NativePINVOKE.PxJoint_release(swigCPtr);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public PxScene getScene() {
    global::System.IntPtr cPtr = NativePINVOKE.PxJoint_getScene(swigCPtr);
    PxScene ret = (cPtr == global::System.IntPtr.Zero) ? null : PxScene.getWrapper(cPtr, false);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
