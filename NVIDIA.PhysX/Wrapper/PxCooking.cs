//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace NVIDIA.PhysX {

public partial class PxCooking {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;
  public object userData;

  internal PxCooking(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(PxCooking obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static PxCooking getWrapper(global::System.IntPtr cPtr, bool cMemoryOwn) {
      var wrapper = WrapperCache.find(cPtr);
      if (!(wrapper is PxCooking)) {
          wrapper = new PxCooking(cPtr, cMemoryOwn);
          WrapperCache.add(cPtr, wrapper);
      }
      return wrapper as PxCooking;
  }

  ~PxCooking() {
    WrapperCache.remove(swigCPtr.Handle, this);
  }

  public void release() {
    NativePINVOKE.PxCooking_release(swigCPtr);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setParams(PxCookingParams params_) {
    NativePINVOKE.PxCooking_setParams(swigCPtr, PxCookingParams.getCPtr(params_));
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public PxCookingParams getParams() {
    PxCookingParams ret = new PxCookingParams(NativePINVOKE.PxCooking_getParams(swigCPtr), false);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool platformMismatch() {
    bool ret = NativePINVOKE.PxCooking_platformMismatch(swigCPtr);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool cookTriangleMesh(PxTriangleMeshDesc desc, PxOutputStream stream, out PxTriangleMeshCookingResult condition) {
    bool ret = NativePINVOKE.PxCooking_cookTriangleMesh__SWIG_0(swigCPtr, PxTriangleMeshDesc.getCPtr(desc), PxOutputStream.getCPtr(stream), out condition);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool cookTriangleMesh(PxTriangleMeshDesc desc, PxOutputStream stream) {
    bool ret = NativePINVOKE.PxCooking_cookTriangleMesh__SWIG_1(swigCPtr, PxTriangleMeshDesc.getCPtr(desc), PxOutputStream.getCPtr(stream));
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PxTriangleMesh createTriangleMesh(PxTriangleMeshDesc desc, PxPhysicsInsertionCallback insertionCallback, out PxTriangleMeshCookingResult condition) {
    global::System.IntPtr cPtr = NativePINVOKE.PxCooking_createTriangleMesh__SWIG_0(swigCPtr, PxTriangleMeshDesc.getCPtr(desc), PxPhysicsInsertionCallback.getCPtr(insertionCallback), out condition);
    PxTriangleMesh ret = (cPtr == global::System.IntPtr.Zero) ? null : PxTriangleMesh.getWrapper(cPtr, false);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PxTriangleMesh createTriangleMesh(PxTriangleMeshDesc desc, PxPhysicsInsertionCallback insertionCallback) {
    global::System.IntPtr cPtr = NativePINVOKE.PxCooking_createTriangleMesh__SWIG_1(swigCPtr, PxTriangleMeshDesc.getCPtr(desc), PxPhysicsInsertionCallback.getCPtr(insertionCallback));
    PxTriangleMesh ret = (cPtr == global::System.IntPtr.Zero) ? null : PxTriangleMesh.getWrapper(cPtr, false);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool validateTriangleMesh(PxTriangleMeshDesc desc) {
    bool ret = NativePINVOKE.PxCooking_validateTriangleMesh(swigCPtr, PxTriangleMeshDesc.getCPtr(desc));
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool cookConvexMesh(PxConvexMeshDesc desc, PxOutputStream stream, out PxConvexMeshCookingResult condition) {
    bool ret = NativePINVOKE.PxCooking_cookConvexMesh__SWIG_0(swigCPtr, PxConvexMeshDesc.getCPtr(desc), PxOutputStream.getCPtr(stream), out condition);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool cookConvexMesh(PxConvexMeshDesc desc, PxOutputStream stream) {
    bool ret = NativePINVOKE.PxCooking_cookConvexMesh__SWIG_1(swigCPtr, PxConvexMeshDesc.getCPtr(desc), PxOutputStream.getCPtr(stream));
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PxConvexMesh createConvexMesh(PxConvexMeshDesc desc, PxPhysicsInsertionCallback insertionCallback, out PxConvexMeshCookingResult condition) {
    global::System.IntPtr cPtr = NativePINVOKE.PxCooking_createConvexMesh__SWIG_0(swigCPtr, PxConvexMeshDesc.getCPtr(desc), PxPhysicsInsertionCallback.getCPtr(insertionCallback), out condition);
    PxConvexMesh ret = (cPtr == global::System.IntPtr.Zero) ? null : PxConvexMesh.getWrapper(cPtr, false);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PxConvexMesh createConvexMesh(PxConvexMeshDesc desc, PxPhysicsInsertionCallback insertionCallback) {
    global::System.IntPtr cPtr = NativePINVOKE.PxCooking_createConvexMesh__SWIG_1(swigCPtr, PxConvexMeshDesc.getCPtr(desc), PxPhysicsInsertionCallback.getCPtr(insertionCallback));
    PxConvexMesh ret = (cPtr == global::System.IntPtr.Zero) ? null : PxConvexMesh.getWrapper(cPtr, false);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool validateConvexMesh(PxConvexMeshDesc desc) {
    bool ret = NativePINVOKE.PxCooking_validateConvexMesh(swigCPtr, PxConvexMeshDesc.getCPtr(desc));
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool cookHeightField(PxHeightFieldDesc desc, PxOutputStream stream) {
    bool ret = NativePINVOKE.PxCooking_cookHeightField(swigCPtr, PxHeightFieldDesc.getCPtr(desc), PxOutputStream.getCPtr(stream));
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PxHeightField createHeightField(PxHeightFieldDesc desc, PxPhysicsInsertionCallback insertionCallback) {
    global::System.IntPtr cPtr = NativePINVOKE.PxCooking_createHeightField(swigCPtr, PxHeightFieldDesc.getCPtr(desc), PxPhysicsInsertionCallback.getCPtr(insertionCallback));
    PxHeightField ret = (cPtr == global::System.IntPtr.Zero) ? null : PxHeightField.getWrapper(cPtr, false);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool cookBVHStructure(PxBVHStructureDesc desc, PxOutputStream stream) {
    bool ret = NativePINVOKE.PxCooking_cookBVHStructure(swigCPtr, PxBVHStructureDesc.getCPtr(desc), PxOutputStream.getCPtr(stream));
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PxBVHStructure createBVHStructure(PxBVHStructureDesc desc, PxPhysicsInsertionCallback insertionCallback) {
    global::System.IntPtr cPtr = NativePINVOKE.PxCooking_createBVHStructure(swigCPtr, PxBVHStructureDesc.getCPtr(desc), PxPhysicsInsertionCallback.getCPtr(insertionCallback));
    PxBVHStructure ret = (cPtr == global::System.IntPtr.Zero) ? null : PxBVHStructure.getWrapper(cPtr, false);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
