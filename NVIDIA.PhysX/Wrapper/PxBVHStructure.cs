//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace NVIDIA.PhysX {

public partial class PxBVHStructure : PxBase {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal PxBVHStructure(global::System.IntPtr cPtr, bool cMemoryOwn) : base(NativePINVOKE.PxBVHStructure_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(PxBVHStructure obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static new PxBVHStructure getWrapper(global::System.IntPtr cPtr, bool cMemoryOwn) {
      var wrapper = WrapperCache.find(cPtr);
      if (!(wrapper is PxBVHStructure)) {
          wrapper = new PxBVHStructure(cPtr, cMemoryOwn);
          WrapperCache.add(cPtr, wrapper);
      }
      return wrapper as PxBVHStructure;
  }

  public uint raycast( PxVec3  origin,  PxVec3  unitDir, float maxDist, uint maxHits, out uint rayHits) {
    uint ret = NativePINVOKE.PxBVHStructure_raycast(swigCPtr,  origin.swigCPtr ,  unitDir.swigCPtr , maxDist, maxHits, out rayHits);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint sweep( PxBounds3  aabb,  PxVec3  unitDir, float maxDist, uint maxHits, out uint sweepHits) {
    uint ret = NativePINVOKE.PxBVHStructure_sweep(swigCPtr,  aabb.swigCPtr ,  unitDir.swigCPtr , maxDist, maxHits, out sweepHits);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint overlap( PxBounds3  aabb, uint maxHits, out uint overlapHits) {
    uint ret = NativePINVOKE.PxBVHStructure_overlap(swigCPtr,  aabb.swigCPtr , maxHits, out overlapHits);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public  PxBounds3  getBounds() {
        global::System.IntPtr ptr = NativePINVOKE.PxBVHStructure_getBounds(swigCPtr);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
        //PxBounds3 ret = global::System.Runtime.InteropServices.Marshal.PtrToStructure<PxBounds3>(ptr);
        PxBounds3 ret; unsafe { ret = *(PxBounds3*)ptr; }
        return ret;
    }

  public uint getNbBounds() {
    uint ret = NativePINVOKE.PxBVHStructure_getNbBounds(swigCPtr);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override string getConcreteTypeName() {
    string ret = NativePINVOKE.PxBVHStructure_getConcreteTypeName(swigCPtr);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
