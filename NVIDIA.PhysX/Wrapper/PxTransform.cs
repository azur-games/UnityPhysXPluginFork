//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace NVIDIA.PhysX {

[global::System.Runtime.InteropServices.StructLayout(global::System.Runtime.InteropServices.LayoutKind.Sequential)]
public partial struct PxTransform {

  public PxQuat q; public PxVec3 p;

  internal global::System.IntPtr swigCPtr {
    get { unsafe { fixed(PxTransform* p = &this) return (global::System.IntPtr)p; } }
  }

  internal PxTransform(global::System.IntPtr ptr, bool unused) {
      //this = global::System.Runtime.InteropServices.Marshal.PtrToStructure<PxTransform>(ptr);
      unsafe { this = *(PxTransform*)ptr; }
  }
    
  public PxTransform( PxVec3  position) : this(NativePINVOKE.new_PxTransform__SWIG_0( position.swigCPtr ), true) { 
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve(); }
  public PxTransform(PxIDENTITY r) : this(NativePINVOKE.new_PxTransform__SWIG_1((int)r), true) { 
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve(); }
  public PxTransform( PxQuat  orientation) : this(NativePINVOKE.new_PxTransform__SWIG_2( orientation.swigCPtr ), true) { 
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve(); }
  public PxTransform(float x, float y, float z,  PxQuat  aQ) : this(NativePINVOKE.new_PxTransform__SWIG_3(x, y, z,  aQ.swigCPtr ), true) { 
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve(); }
  public PxTransform(float x, float y, float z) : this(NativePINVOKE.new_PxTransform__SWIG_4(x, y, z), true) { 
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve(); }
  public PxTransform( PxVec3  p0,  PxQuat  q0) : this(NativePINVOKE.new_PxTransform__SWIG_5( p0.swigCPtr ,  q0.swigCPtr ), true) { 
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve(); }
  public PxTransform( PxMat44  m) : this(NativePINVOKE.new_PxTransform__SWIG_6( m.swigCPtr ), true) { 
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve(); }
  public  PxTransform  getInverse() {
        global::System.IntPtr ptr = NativePINVOKE.PxTransform_getInverse(swigCPtr);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
        //PxTransform ret = global::System.Runtime.InteropServices.Marshal.PtrToStructure<PxTransform>(ptr);
        PxTransform ret; unsafe { ret = *(PxTransform*)ptr; }
        return ret;
    }

  public  PxVec3  transform( PxVec3  input) {
        global::System.IntPtr ptr = NativePINVOKE.PxTransform_transform__SWIG_0(swigCPtr,  input.swigCPtr );
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
        //PxVec3 ret = global::System.Runtime.InteropServices.Marshal.PtrToStructure<PxVec3>(ptr);
        PxVec3 ret; unsafe { ret = *(PxVec3*)ptr; }
        return ret;
    }

  public  PxVec3  transformInv( PxVec3  input) {
        global::System.IntPtr ptr = NativePINVOKE.PxTransform_transformInv__SWIG_0(swigCPtr,  input.swigCPtr );
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
        //PxVec3 ret = global::System.Runtime.InteropServices.Marshal.PtrToStructure<PxVec3>(ptr);
        PxVec3 ret; unsafe { ret = *(PxVec3*)ptr; }
        return ret;
    }

  public  PxVec3  rotate( PxVec3  input) {
        global::System.IntPtr ptr = NativePINVOKE.PxTransform_rotate(swigCPtr,  input.swigCPtr );
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
        //PxVec3 ret = global::System.Runtime.InteropServices.Marshal.PtrToStructure<PxVec3>(ptr);
        PxVec3 ret; unsafe { ret = *(PxVec3*)ptr; }
        return ret;
    }

  public  PxVec3  rotateInv( PxVec3  input) {
        global::System.IntPtr ptr = NativePINVOKE.PxTransform_rotateInv(swigCPtr,  input.swigCPtr );
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
        //PxVec3 ret = global::System.Runtime.InteropServices.Marshal.PtrToStructure<PxVec3>(ptr);
        PxVec3 ret; unsafe { ret = *(PxVec3*)ptr; }
        return ret;
    }

  public  PxTransform  transform( PxTransform  src) {
        global::System.IntPtr ptr = NativePINVOKE.PxTransform_transform__SWIG_1(swigCPtr,  src.swigCPtr );
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
        //PxTransform ret = global::System.Runtime.InteropServices.Marshal.PtrToStructure<PxTransform>(ptr);
        PxTransform ret; unsafe { ret = *(PxTransform*)ptr; }
        return ret;
    }

  public bool isValid() {
    bool ret = NativePINVOKE.PxTransform_isValid(swigCPtr);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool isSane() {
    bool ret = NativePINVOKE.PxTransform_isSane(swigCPtr);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool isFinite() {
    bool ret = NativePINVOKE.PxTransform_isFinite(swigCPtr);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public  PxTransform  transformInv( PxTransform  src) {
        global::System.IntPtr ptr = NativePINVOKE.PxTransform_transformInv__SWIG_1(swigCPtr,  src.swigCPtr );
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
        //PxTransform ret = global::System.Runtime.InteropServices.Marshal.PtrToStructure<PxTransform>(ptr);
        PxTransform ret; unsafe { ret = *(PxTransform*)ptr; }
        return ret;
    }

  public  PxPlane  transform( PxPlane  plane) {
        global::System.IntPtr ptr = NativePINVOKE.PxTransform_transform__SWIG_2(swigCPtr,  plane.swigCPtr );
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
        //PxPlane ret = global::System.Runtime.InteropServices.Marshal.PtrToStructure<PxPlane>(ptr);
        PxPlane ret; unsafe { ret = *(PxPlane*)ptr; }
        return ret;
    }

  public  PxPlane  inverseTransform( PxPlane  plane) {
        global::System.IntPtr ptr = NativePINVOKE.PxTransform_inverseTransform(swigCPtr,  plane.swigCPtr );
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
        //PxPlane ret = global::System.Runtime.InteropServices.Marshal.PtrToStructure<PxPlane>(ptr);
        PxPlane ret; unsafe { ret = *(PxPlane*)ptr; }
        return ret;
    }

  public  PxTransform  getNormalized() {
        global::System.IntPtr ptr = NativePINVOKE.PxTransform_getNormalized(swigCPtr);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
        //PxTransform ret = global::System.Runtime.InteropServices.Marshal.PtrToStructure<PxTransform>(ptr);
        PxTransform ret; unsafe { ret = *(PxTransform*)ptr; }
        return ret;
    }

}

}
