//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace NVIDIA.PhysX {

[global::System.Runtime.InteropServices.StructLayout(global::System.Runtime.InteropServices.LayoutKind.Sequential)]
public partial struct PxBounds3 {

  public PxVec3 minimum,maximum;

  internal global::System.IntPtr swigCPtr {
    get { unsafe { fixed(PxBounds3* p = &this) return (global::System.IntPtr)p; } }
  }

  internal PxBounds3(global::System.IntPtr ptr, bool unused) {
      //this = global::System.Runtime.InteropServices.Marshal.PtrToStructure<PxBounds3>(ptr);
      unsafe { this = *(PxBounds3*)ptr; }
  }
    
  public PxBounds3( PxVec3  minimum,  PxVec3  maximum) : this(NativePINVOKE.new_PxBounds3( minimum.swigCPtr ,  maximum.swigCPtr ), true) { 
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve(); }
  public static  PxBounds3  empty() {
        global::System.IntPtr ptr = NativePINVOKE.PxBounds3_empty();
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
        //PxBounds3 ret = global::System.Runtime.InteropServices.Marshal.PtrToStructure<PxBounds3>(ptr);
        PxBounds3 ret; unsafe { ret = *(PxBounds3*)ptr; }
        return ret;
    }

  public static  PxBounds3  boundsOfPoints( PxVec3  v0,  PxVec3  v1) {
        global::System.IntPtr ptr = NativePINVOKE.PxBounds3_boundsOfPoints( v0.swigCPtr ,  v1.swigCPtr );
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
        //PxBounds3 ret = global::System.Runtime.InteropServices.Marshal.PtrToStructure<PxBounds3>(ptr);
        PxBounds3 ret; unsafe { ret = *(PxBounds3*)ptr; }
        return ret;
    }

  public static  PxBounds3  centerExtents( PxVec3  center,  PxVec3  extent) {
        global::System.IntPtr ptr = NativePINVOKE.PxBounds3_centerExtents( center.swigCPtr ,  extent.swigCPtr );
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
        //PxBounds3 ret = global::System.Runtime.InteropServices.Marshal.PtrToStructure<PxBounds3>(ptr);
        PxBounds3 ret; unsafe { ret = *(PxBounds3*)ptr; }
        return ret;
    }

  public static  PxBounds3  basisExtent( PxVec3  center,  PxMat33  basis,  PxVec3  extent) {
        global::System.IntPtr ptr = NativePINVOKE.PxBounds3_basisExtent( center.swigCPtr ,  basis.swigCPtr ,  extent.swigCPtr );
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
        //PxBounds3 ret = global::System.Runtime.InteropServices.Marshal.PtrToStructure<PxBounds3>(ptr);
        PxBounds3 ret; unsafe { ret = *(PxBounds3*)ptr; }
        return ret;
    }

  public static  PxBounds3  poseExtent( PxTransform  pose,  PxVec3  extent) {
        global::System.IntPtr ptr = NativePINVOKE.PxBounds3_poseExtent( pose.swigCPtr ,  extent.swigCPtr );
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
        //PxBounds3 ret = global::System.Runtime.InteropServices.Marshal.PtrToStructure<PxBounds3>(ptr);
        PxBounds3 ret; unsafe { ret = *(PxBounds3*)ptr; }
        return ret;
    }

  public static  PxBounds3  transformSafe( PxMat33  matrix,  PxBounds3  bounds) {
        global::System.IntPtr ptr = NativePINVOKE.PxBounds3_transformSafe__SWIG_0( matrix.swigCPtr ,  bounds.swigCPtr );
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
        //PxBounds3 ret = global::System.Runtime.InteropServices.Marshal.PtrToStructure<PxBounds3>(ptr);
        PxBounds3 ret; unsafe { ret = *(PxBounds3*)ptr; }
        return ret;
    }

  public static  PxBounds3  transformFast( PxMat33  matrix,  PxBounds3  bounds) {
        global::System.IntPtr ptr = NativePINVOKE.PxBounds3_transformFast__SWIG_0( matrix.swigCPtr ,  bounds.swigCPtr );
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
        //PxBounds3 ret = global::System.Runtime.InteropServices.Marshal.PtrToStructure<PxBounds3>(ptr);
        PxBounds3 ret; unsafe { ret = *(PxBounds3*)ptr; }
        return ret;
    }

  public static  PxBounds3  transformSafe( PxTransform  transform,  PxBounds3  bounds) {
        global::System.IntPtr ptr = NativePINVOKE.PxBounds3_transformSafe__SWIG_1( transform.swigCPtr ,  bounds.swigCPtr );
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
        //PxBounds3 ret = global::System.Runtime.InteropServices.Marshal.PtrToStructure<PxBounds3>(ptr);
        PxBounds3 ret; unsafe { ret = *(PxBounds3*)ptr; }
        return ret;
    }

  public static  PxBounds3  transformFast( PxTransform  transform,  PxBounds3  bounds) {
        global::System.IntPtr ptr = NativePINVOKE.PxBounds3_transformFast__SWIG_1( transform.swigCPtr ,  bounds.swigCPtr );
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
        //PxBounds3 ret = global::System.Runtime.InteropServices.Marshal.PtrToStructure<PxBounds3>(ptr);
        PxBounds3 ret; unsafe { ret = *(PxBounds3*)ptr; }
        return ret;
    }

  public void setMaximal() {
    NativePINVOKE.PxBounds3_setMaximal(swigCPtr);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public void include( PxVec3  v) {
    NativePINVOKE.PxBounds3_include__SWIG_0(swigCPtr,  v.swigCPtr );
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public void include( PxBounds3  b) {
    NativePINVOKE.PxBounds3_include__SWIG_1(swigCPtr,  b.swigCPtr );
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool isEmpty() {
    bool ret = NativePINVOKE.PxBounds3_isEmpty(swigCPtr);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool intersects( PxBounds3  b) {
    bool ret = NativePINVOKE.PxBounds3_intersects(swigCPtr,  b.swigCPtr );
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool intersects1D( PxBounds3  a, uint axis) {
    bool ret = NativePINVOKE.PxBounds3_intersects1D(swigCPtr,  a.swigCPtr , axis);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool contains( PxVec3  v) {
    bool ret = NativePINVOKE.PxBounds3_contains(swigCPtr,  v.swigCPtr );
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool isInside( PxBounds3  box) {
    bool ret = NativePINVOKE.PxBounds3_isInside(swigCPtr,  box.swigCPtr );
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public  PxVec3  getCenter() {
        global::System.IntPtr ptr = NativePINVOKE.PxBounds3_getCenter__SWIG_0(swigCPtr);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
        //PxVec3 ret = global::System.Runtime.InteropServices.Marshal.PtrToStructure<PxVec3>(ptr);
        PxVec3 ret; unsafe { ret = *(PxVec3*)ptr; }
        return ret;
    }

  public float getCenter(uint axis) {
    float ret = NativePINVOKE.PxBounds3_getCenter__SWIG_1(swigCPtr, axis);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public float getExtents(uint axis) {
    float ret = NativePINVOKE.PxBounds3_getExtents__SWIG_0(swigCPtr, axis);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public  PxVec3  getDimensions() {
        global::System.IntPtr ptr = NativePINVOKE.PxBounds3_getDimensions(swigCPtr);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
        //PxVec3 ret = global::System.Runtime.InteropServices.Marshal.PtrToStructure<PxVec3>(ptr);
        PxVec3 ret; unsafe { ret = *(PxVec3*)ptr; }
        return ret;
    }

  public  PxVec3  getExtents() {
        global::System.IntPtr ptr = NativePINVOKE.PxBounds3_getExtents__SWIG_1(swigCPtr);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
        //PxVec3 ret = global::System.Runtime.InteropServices.Marshal.PtrToStructure<PxVec3>(ptr);
        PxVec3 ret; unsafe { ret = *(PxVec3*)ptr; }
        return ret;
    }

  public void scaleSafe(float scale) {
    NativePINVOKE.PxBounds3_scaleSafe(swigCPtr, scale);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public void scaleFast(float scale) {
    NativePINVOKE.PxBounds3_scaleFast(swigCPtr, scale);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public void fattenSafe(float distance) {
    NativePINVOKE.PxBounds3_fattenSafe(swigCPtr, distance);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public void fattenFast(float distance) {
    NativePINVOKE.PxBounds3_fattenFast(swigCPtr, distance);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool isFinite() {
    bool ret = NativePINVOKE.PxBounds3_isFinite(swigCPtr);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool isValid() {
    bool ret = NativePINVOKE.PxBounds3_isValid(swigCPtr);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
