//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace NVIDIA.PhysX {

public partial class PxDefaultCpuDispatcher : PxCpuDispatcher {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal PxDefaultCpuDispatcher(global::System.IntPtr cPtr, bool cMemoryOwn) : base(NativePINVOKE.PxDefaultCpuDispatcher_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(PxDefaultCpuDispatcher obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static new PxDefaultCpuDispatcher getWrapper(global::System.IntPtr cPtr, bool cMemoryOwn) {
      var wrapper = WrapperCache.find(cPtr);
      if (!(wrapper is PxDefaultCpuDispatcher)) {
          wrapper = new PxDefaultCpuDispatcher(cPtr, cMemoryOwn);
          WrapperCache.add(cPtr, wrapper);
      }
      return wrapper as PxDefaultCpuDispatcher;
  }

  public void release() {
    NativePINVOKE.PxDefaultCpuDispatcher_release(swigCPtr);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setRunProfiled(bool runProfiled) {
    NativePINVOKE.PxDefaultCpuDispatcher_setRunProfiled(swigCPtr, runProfiled);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool getRunProfiled() {
    bool ret = NativePINVOKE.PxDefaultCpuDispatcher_getRunProfiled(swigCPtr);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
