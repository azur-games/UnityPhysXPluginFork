//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace NVIDIA.PhysX {

public partial class PxArticulationCache {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal PxArticulationCache(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(PxArticulationCache obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~PxArticulationCache() {
    destroy();
  }

  public virtual void destroy() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          NativePINVOKE.delete_PxArticulationCache(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public void readJointVelocities(float[] velocities, int start, int count) {
    NativePINVOKE.PxArticulationCache_readJointVelocities(swigCPtr, velocities, start, count);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public void writeJointVelocities(float[] velocities, int start, int count) {
    NativePINVOKE.PxArticulationCache_writeJointVelocities(swigCPtr, velocities, start, count);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public void readJointPositions(float[] positions, int start, int count) {
    NativePINVOKE.PxArticulationCache_readJointPositions(swigCPtr, positions, start, count);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public void writeJointPositions(float[] positions, int start, int count) {
    NativePINVOKE.PxArticulationCache_writeJointPositions(swigCPtr, positions, start, count);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public PxArticulationRootLinkData rootLinkData {
    set {
      NativePINVOKE.PxArticulationCache_rootLinkData_set(swigCPtr,  value.swigCPtr );
      if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    } 
        get { global::System.IntPtr ptr = NativePINVOKE.PxArticulationCache_rootLinkData_get(swigCPtr);
      if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
              //PxArticulationRootLinkData ret = global::System.Runtime.InteropServices.Marshal.PtrToStructure<PxArticulationRootLinkData>(ptr);
              PxArticulationRootLinkData ret; unsafe { ret = *(PxArticulationRootLinkData*)ptr; }
              return ret; }
    
  }

  public uint version {
    set {
      NativePINVOKE.PxArticulationCache_version_set(swigCPtr, value);
      if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      uint ret = NativePINVOKE.PxArticulationCache_version_get(swigCPtr);
      if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public enum Flags {
    VELOCITY = (1 << 0),
    ACCELERATION = (1 << 1),
    POSITION = (1 << 2),
    FORCE = (1 << 3),
    LINKVELOCITY = (1 << 4),
    LINKACCELERATION = (1 << 5),
    ROOT = (1 << 6),
    ALL = (1 << 0)|(1 << 1)|(1 << 2)|(1 << 4)|(1 << 5)|(1 << 6)
  }

}

}
