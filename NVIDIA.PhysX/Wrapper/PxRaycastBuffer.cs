//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace NVIDIA.PhysX {

public partial class PxRaycastBuffer : PxRaycastCallback {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal PxRaycastBuffer(global::System.IntPtr cPtr, bool cMemoryOwn) : base(NativePINVOKE.PxRaycastBuffer_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(PxRaycastBuffer obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  public override void destroy() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          NativePINVOKE.delete_PxRaycastBuffer(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.destroy();
    }
  }

  public PxRaycastBuffer(PxRaycastHit aTouches, uint aMaxNbTouches) : this(NativePINVOKE.new_PxRaycastBuffer__SWIG_0(PxRaycastHit.getCPtr(aTouches), aMaxNbTouches), true) {
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public PxRaycastBuffer(PxRaycastHit aTouches) : this(NativePINVOKE.new_PxRaycastBuffer__SWIG_1(PxRaycastHit.getCPtr(aTouches)), true) {
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public PxRaycastBuffer() : this(NativePINVOKE.new_PxRaycastBuffer__SWIG_2(), true) {
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public uint getNbAnyHits() {
    uint ret = NativePINVOKE.PxRaycastBuffer_getNbAnyHits(swigCPtr);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PxRaycastHit getAnyHit(uint index) {
    PxRaycastHit ret = new PxRaycastHit(NativePINVOKE.PxRaycastBuffer_getAnyHit(swigCPtr, index), false);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint getNbTouches() {
    uint ret = NativePINVOKE.PxRaycastBuffer_getNbTouches(swigCPtr);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PxRaycastHit getTouches() {
    global::System.IntPtr cPtr = NativePINVOKE.PxRaycastBuffer_getTouches(swigCPtr);
    PxRaycastHit ret = (cPtr == global::System.IntPtr.Zero) ? null : new PxRaycastHit(cPtr, false);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PxRaycastHit getTouch(uint index) {
    PxRaycastHit ret = new PxRaycastHit(NativePINVOKE.PxRaycastBuffer_getTouch(swigCPtr, index), false);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint getMaxNbTouches() {
    uint ret = NativePINVOKE.PxRaycastBuffer_getMaxNbTouches(swigCPtr);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
