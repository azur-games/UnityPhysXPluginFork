//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace NVIDIA.PhysX {

[global::System.Runtime.InteropServices.StructLayout(global::System.Runtime.InteropServices.LayoutKind.Sequential)]
public partial struct PxMat33 {

  public PxVec3 column0,column1,column2;

  internal global::System.IntPtr swigCPtr {
    get { unsafe { fixed(PxMat33* p = &this) return (global::System.IntPtr)p; } }
  }

  internal PxMat33(global::System.IntPtr ptr, bool unused) {
      //this = global::System.Runtime.InteropServices.Marshal.PtrToStructure<PxMat33>(ptr);
      unsafe { this = *(PxMat33*)ptr; }
  }
    
  public PxMat33(PxIDENTITY r) : this(NativePINVOKE.new_PxMat33__SWIG_0((int)r), true) { 
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve(); }
  public PxMat33(PxZERO r) : this(NativePINVOKE.new_PxMat33__SWIG_1((int)r), true) { 
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve(); }
  public PxMat33( PxVec3  col0,  PxVec3  col1,  PxVec3  col2) : this(NativePINVOKE.new_PxMat33__SWIG_2( col0.swigCPtr ,  col1.swigCPtr ,  col2.swigCPtr ), true) { 
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve(); }
  public PxMat33(float r) : this(NativePINVOKE.new_PxMat33__SWIG_3(r), true) { 
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve(); }
  public PxMat33( PxQuat  q) : this(NativePINVOKE.new_PxMat33__SWIG_4( q.swigCPtr ), true) { 
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve(); }
  public static  PxMat33  createDiagonal( PxVec3  d) {
        global::System.IntPtr ptr = NativePINVOKE.PxMat33_createDiagonal( d.swigCPtr );
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
        //PxMat33 ret = global::System.Runtime.InteropServices.Marshal.PtrToStructure<PxMat33>(ptr);
        PxMat33 ret; unsafe { ret = *(PxMat33*)ptr; }
        return ret;
    }

  public  PxMat33  getTranspose() {
        global::System.IntPtr ptr = NativePINVOKE.PxMat33_getTranspose(swigCPtr);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
        //PxMat33 ret = global::System.Runtime.InteropServices.Marshal.PtrToStructure<PxMat33>(ptr);
        PxMat33 ret; unsafe { ret = *(PxMat33*)ptr; }
        return ret;
    }

  public  PxMat33  getInverse() {
        global::System.IntPtr ptr = NativePINVOKE.PxMat33_getInverse(swigCPtr);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
        //PxMat33 ret = global::System.Runtime.InteropServices.Marshal.PtrToStructure<PxMat33>(ptr);
        PxMat33 ret; unsafe { ret = *(PxMat33*)ptr; }
        return ret;
    }

  public float getDeterminant() {
    float ret = NativePINVOKE.PxMat33_getDeterminant(swigCPtr);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public  PxVec3  transform( PxVec3  other) {
        global::System.IntPtr ptr = NativePINVOKE.PxMat33_transform(swigCPtr,  other.swigCPtr );
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
        //PxVec3 ret = global::System.Runtime.InteropServices.Marshal.PtrToStructure<PxVec3>(ptr);
        PxVec3 ret; unsafe { ret = *(PxVec3*)ptr; }
        return ret;
    }

  public  PxVec3  transformTranspose( PxVec3  other) {
        global::System.IntPtr ptr = NativePINVOKE.PxMat33_transformTranspose(swigCPtr,  other.swigCPtr );
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
        //PxVec3 ret = global::System.Runtime.InteropServices.Marshal.PtrToStructure<PxVec3>(ptr);
        PxVec3 ret; unsafe { ret = *(PxVec3*)ptr; }
        return ret;
    }

}

}
