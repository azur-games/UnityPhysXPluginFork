//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace NVIDIA.PhysX {

public partial class PxJointLinearLimitPair : PxJointLimitParameters {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal PxJointLinearLimitPair(global::System.IntPtr cPtr, bool cMemoryOwn) : base(NativePINVOKE.PxJointLinearLimitPair_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(PxJointLinearLimitPair obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  public override void destroy() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          NativePINVOKE.delete_PxJointLinearLimitPair(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.destroy();
    }
  }

  public float upper {
    set {
      NativePINVOKE.PxJointLinearLimitPair_upper_set(swigCPtr, value);
      if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      float ret = NativePINVOKE.PxJointLinearLimitPair_upper_get(swigCPtr);
      if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public float lower {
    set {
      NativePINVOKE.PxJointLinearLimitPair_lower_set(swigCPtr, value);
      if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      float ret = NativePINVOKE.PxJointLinearLimitPair_lower_get(swigCPtr);
      if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public PxJointLinearLimitPair(PxTolerancesScale scale, float lowerLimit, float upperLimit, float contactDist) : this(NativePINVOKE.new_PxJointLinearLimitPair__SWIG_0(PxTolerancesScale.getCPtr(scale), lowerLimit, upperLimit, contactDist), true) {
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public PxJointLinearLimitPair(PxTolerancesScale scale, float lowerLimit, float upperLimit) : this(NativePINVOKE.new_PxJointLinearLimitPair__SWIG_1(PxTolerancesScale.getCPtr(scale), lowerLimit, upperLimit), true) {
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public PxJointLinearLimitPair(PxTolerancesScale scale, float lowerLimit) : this(NativePINVOKE.new_PxJointLinearLimitPair__SWIG_2(PxTolerancesScale.getCPtr(scale), lowerLimit), true) {
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public PxJointLinearLimitPair(PxTolerancesScale scale) : this(NativePINVOKE.new_PxJointLinearLimitPair__SWIG_3(PxTolerancesScale.getCPtr(scale)), true) {
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public PxJointLinearLimitPair(float lowerLimit, float upperLimit, PxSpring spring) : this(NativePINVOKE.new_PxJointLinearLimitPair__SWIG_4(lowerLimit, upperLimit, PxSpring.getCPtr(spring)), true) {
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public new bool isValid() {
    bool ret = NativePINVOKE.PxJointLinearLimitPair_isValid(swigCPtr);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
