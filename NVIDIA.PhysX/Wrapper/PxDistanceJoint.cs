//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace NVIDIA.PhysX {

public partial class PxDistanceJoint : PxJoint {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal PxDistanceJoint(global::System.IntPtr cPtr, bool cMemoryOwn) : base(NativePINVOKE.PxDistanceJoint_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(PxDistanceJoint obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static new PxDistanceJoint getWrapper(global::System.IntPtr cPtr, bool cMemoryOwn) {
      var wrapper = WrapperCache.find(cPtr);
      if (!(wrapper is PxDistanceJoint)) {
          wrapper = new PxDistanceJoint(cPtr, cMemoryOwn);
          WrapperCache.add(cPtr, wrapper);
      }
      return wrapper as PxDistanceJoint;
  }

  public float getDistance() {
    float ret = NativePINVOKE.PxDistanceJoint_getDistance(swigCPtr);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setMinDistance(float distance) {
    NativePINVOKE.PxDistanceJoint_setMinDistance(swigCPtr, distance);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public float getMinDistance() {
    float ret = NativePINVOKE.PxDistanceJoint_getMinDistance(swigCPtr);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setMaxDistance(float distance) {
    NativePINVOKE.PxDistanceJoint_setMaxDistance(swigCPtr, distance);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public float getMaxDistance() {
    float ret = NativePINVOKE.PxDistanceJoint_getMaxDistance(swigCPtr);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setTolerance(float tolerance) {
    NativePINVOKE.PxDistanceJoint_setTolerance(swigCPtr, tolerance);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public float getTolerance() {
    float ret = NativePINVOKE.PxDistanceJoint_getTolerance(swigCPtr);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setStiffness(float stiffness) {
    NativePINVOKE.PxDistanceJoint_setStiffness(swigCPtr, stiffness);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public float getStiffness() {
    float ret = NativePINVOKE.PxDistanceJoint_getStiffness(swigCPtr);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setDamping(float damping) {
    NativePINVOKE.PxDistanceJoint_setDamping(swigCPtr, damping);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public float getDamping() {
    float ret = NativePINVOKE.PxDistanceJoint_getDamping(swigCPtr);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setDistanceJointFlags(PxDistanceJointFlag flags) {
    NativePINVOKE.PxDistanceJoint_setDistanceJointFlags(swigCPtr, (int)flags);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setDistanceJointFlag(PxDistanceJointFlag flag, bool value) {
    NativePINVOKE.PxDistanceJoint_setDistanceJointFlag(swigCPtr, (int)flag, value);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public PxDistanceJointFlag getDistanceJointFlags() {
    PxDistanceJointFlag ret = (PxDistanceJointFlag)NativePINVOKE.PxDistanceJoint_getDistanceJointFlags(swigCPtr);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
