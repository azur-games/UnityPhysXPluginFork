//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace NVIDIA.PhysX {

public partial class PxMaterial : PxBase {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal PxMaterial(global::System.IntPtr cPtr, bool cMemoryOwn) : base(NativePINVOKE.PxMaterial_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(PxMaterial obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static new PxMaterial getWrapper(global::System.IntPtr cPtr, bool cMemoryOwn) {
      var wrapper = WrapperCache.find(cPtr);
      if (!(wrapper is PxMaterial)) {
          wrapper = new PxMaterial(cPtr, cMemoryOwn);
          WrapperCache.add(cPtr, wrapper);
      }
      return wrapper as PxMaterial;
  }

  public override void release() {
    NativePINVOKE.PxMaterial_release(swigCPtr);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public uint getReferenceCount() {
    uint ret = NativePINVOKE.PxMaterial_getReferenceCount(swigCPtr);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void acquireReference() {
    NativePINVOKE.PxMaterial_acquireReference(swigCPtr);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setDynamicFriction(float coef) {
    NativePINVOKE.PxMaterial_setDynamicFriction(swigCPtr, coef);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public float getDynamicFriction() {
    float ret = NativePINVOKE.PxMaterial_getDynamicFriction(swigCPtr);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setStaticFriction(float coef) {
    NativePINVOKE.PxMaterial_setStaticFriction(swigCPtr, coef);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public float getStaticFriction() {
    float ret = NativePINVOKE.PxMaterial_getStaticFriction(swigCPtr);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setRestitution(float rest) {
    NativePINVOKE.PxMaterial_setRestitution(swigCPtr, rest);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public float getRestitution() {
    float ret = NativePINVOKE.PxMaterial_getRestitution(swigCPtr);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setFlag(PxMaterialFlag flag, bool arg1) {
    NativePINVOKE.PxMaterial_setFlag(swigCPtr, (int)flag, arg1);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setFlags(PxMaterialFlag inFlags) {
    NativePINVOKE.PxMaterial_setFlags(swigCPtr, (int)inFlags);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public PxMaterialFlag getFlags() {
    PxMaterialFlag ret = (PxMaterialFlag)NativePINVOKE.PxMaterial_getFlags(swigCPtr);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setFrictionCombineMode(PxCombineMode combMode) {
    NativePINVOKE.PxMaterial_setFrictionCombineMode(swigCPtr, (int)combMode);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public PxCombineMode getFrictionCombineMode() {
    PxCombineMode ret = (PxCombineMode)NativePINVOKE.PxMaterial_getFrictionCombineMode(swigCPtr);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setRestitutionCombineMode(PxCombineMode combMode) {
    NativePINVOKE.PxMaterial_setRestitutionCombineMode(swigCPtr, (int)combMode);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public PxCombineMode getRestitutionCombineMode() {
    PxCombineMode ret = (PxCombineMode)NativePINVOKE.PxMaterial_getRestitutionCombineMode(swigCPtr);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
