//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace NVIDIA.PhysX {

public partial class PxHeightField : PxBase {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal PxHeightField(global::System.IntPtr cPtr, bool cMemoryOwn) : base(NativePINVOKE.PxHeightField_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(PxHeightField obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static new PxHeightField getWrapper(global::System.IntPtr cPtr, bool cMemoryOwn) {
      var wrapper = WrapperCache.find(cPtr);
      if (!(wrapper is PxHeightField)) {
          wrapper = new PxHeightField(cPtr, cMemoryOwn);
          WrapperCache.add(cPtr, wrapper);
      }
      return wrapper as PxHeightField;
  }

  public uint saveCells(global::System.IntPtr destBuffer, uint destBufferSize) {
    uint ret = NativePINVOKE.PxHeightField_saveCells(swigCPtr, destBuffer, destBufferSize);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool modifySamples(int startCol, int startRow, PxHeightFieldDesc subfieldDesc, bool shrinkBounds) {
    bool ret = NativePINVOKE.PxHeightField_modifySamples__SWIG_0(swigCPtr, startCol, startRow, PxHeightFieldDesc.getCPtr(subfieldDesc), shrinkBounds);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool modifySamples(int startCol, int startRow, PxHeightFieldDesc subfieldDesc) {
    bool ret = NativePINVOKE.PxHeightField_modifySamples__SWIG_1(swigCPtr, startCol, startRow, PxHeightFieldDesc.getCPtr(subfieldDesc));
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint getNbRows() {
    uint ret = NativePINVOKE.PxHeightField_getNbRows(swigCPtr);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint getNbColumns() {
    uint ret = NativePINVOKE.PxHeightField_getNbColumns(swigCPtr);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PxHeightFieldFormat getFormat() {
    PxHeightFieldFormat ret = (PxHeightFieldFormat)NativePINVOKE.PxHeightField_getFormat(swigCPtr);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint getSampleStride() {
    uint ret = NativePINVOKE.PxHeightField_getSampleStride(swigCPtr);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public float getConvexEdgeThreshold() {
    float ret = NativePINVOKE.PxHeightField_getConvexEdgeThreshold(swigCPtr);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PxHeightFieldFlag getFlags() {
    PxHeightFieldFlag ret = (PxHeightFieldFlag)NativePINVOKE.PxHeightField_getFlags(swigCPtr);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public float getHeight(float x, float z) {
    float ret = NativePINVOKE.PxHeightField_getHeight(swigCPtr, x, z);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint getReferenceCount() {
    uint ret = NativePINVOKE.PxHeightField_getReferenceCount(swigCPtr);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void acquireReference() {
    NativePINVOKE.PxHeightField_acquireReference(swigCPtr);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public ushort getTriangleMaterialIndex(uint triangleIndex) {
    ushort ret = NativePINVOKE.PxHeightField_getTriangleMaterialIndex(swigCPtr, triangleIndex);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public  PxVec3  getTriangleNormal(uint triangleIndex) {
        global::System.IntPtr ptr = NativePINVOKE.PxHeightField_getTriangleNormal(swigCPtr, triangleIndex);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
        //PxVec3 ret = global::System.Runtime.InteropServices.Marshal.PtrToStructure<PxVec3>(ptr);
        PxVec3 ret; unsafe { ret = *(PxVec3*)ptr; }
        return ret;
    }

  public  PxHeightFieldSample  getSample(uint row, uint column) {
        global::System.IntPtr ptr = NativePINVOKE.PxHeightField_getSample(swigCPtr, row, column);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
        //PxHeightFieldSample ret = global::System.Runtime.InteropServices.Marshal.PtrToStructure<PxHeightFieldSample>(ptr);
        PxHeightFieldSample ret; unsafe { ret = *(PxHeightFieldSample*)ptr; }
        return ret;
    }

  public uint getTimestamp() {
    uint ret = NativePINVOKE.PxHeightField_getTimestamp(swigCPtr);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
