//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace NVIDIA.PhysX {

[global::System.Runtime.InteropServices.StructLayout(global::System.Runtime.InteropServices.LayoutKind.Sequential)]
public partial struct PxPlane {

  public PxVec3 n; public float d;

  internal global::System.IntPtr swigCPtr {
    get { unsafe { fixed(PxPlane* p = &this) return (global::System.IntPtr)p; } }
  }

  internal PxPlane(global::System.IntPtr ptr, bool unused) {
      //this = global::System.Runtime.InteropServices.Marshal.PtrToStructure<PxPlane>(ptr);
      unsafe { this = *(PxPlane*)ptr; }
  }
    
  public PxPlane(float nx, float ny, float nz, float distance) : this(NativePINVOKE.new_PxPlane__SWIG_0(nx, ny, nz, distance), true) { 
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve(); }
  public PxPlane( PxVec3  normal, float distance) : this(NativePINVOKE.new_PxPlane__SWIG_1( normal.swigCPtr , distance), true) { 
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve(); }
  public PxPlane( PxVec3  point,  PxVec3  normal) : this(NativePINVOKE.new_PxPlane__SWIG_2( point.swigCPtr ,  normal.swigCPtr ), true) { 
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve(); }
  public PxPlane( PxVec3  p0,  PxVec3  p1,  PxVec3  p2) : this(NativePINVOKE.new_PxPlane__SWIG_3( p0.swigCPtr ,  p1.swigCPtr ,  p2.swigCPtr ), true) { 
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve(); }
  public float distance( PxVec3  p) {
    float ret = NativePINVOKE.PxPlane_distance(swigCPtr,  p.swigCPtr );
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool contains( PxVec3  p) {
    bool ret = NativePINVOKE.PxPlane_contains(swigCPtr,  p.swigCPtr );
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public  PxVec3  project( PxVec3  p) {
        global::System.IntPtr ptr = NativePINVOKE.PxPlane_project(swigCPtr,  p.swigCPtr );
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
        //PxVec3 ret = global::System.Runtime.InteropServices.Marshal.PtrToStructure<PxVec3>(ptr);
        PxVec3 ret; unsafe { ret = *(PxVec3*)ptr; }
        return ret;
    }

  public  PxVec3  pointInPlane() {
        global::System.IntPtr ptr = NativePINVOKE.PxPlane_pointInPlane(swigCPtr);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
        //PxVec3 ret = global::System.Runtime.InteropServices.Marshal.PtrToStructure<PxVec3>(ptr);
        PxVec3 ret; unsafe { ret = *(PxVec3*)ptr; }
        return ret;
    }

  public void normalize() {
    NativePINVOKE.PxPlane_normalize(swigCPtr);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

}

}
