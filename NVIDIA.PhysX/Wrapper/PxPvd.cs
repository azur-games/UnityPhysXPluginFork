//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace NVIDIA.PhysX {

public partial class PxPvd : PxProfilerCallback {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal PxPvd(global::System.IntPtr cPtr, bool cMemoryOwn) : base(NativePINVOKE.PxPvd_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(PxPvd obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static new PxPvd getWrapper(global::System.IntPtr cPtr, bool cMemoryOwn) {
      var wrapper = WrapperCache.find(cPtr);
      if (!(wrapper is PxPvd)) {
          wrapper = new PxPvd(cPtr, cMemoryOwn);
          WrapperCache.add(cPtr, wrapper);
      }
      return wrapper as PxPvd;
  }

  public bool connect(PxPvdTransport transport, PxPvdInstrumentationFlag flags) {
    bool ret = NativePINVOKE.PxPvd_connect(swigCPtr, PxPvdTransport.getCPtr(transport), (int)flags);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void disconnect() {
    NativePINVOKE.PxPvd_disconnect(swigCPtr);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool isConnected(bool useCachedStatus) {
    bool ret = NativePINVOKE.PxPvd_isConnected__SWIG_0(swigCPtr, useCachedStatus);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool isConnected() {
    bool ret = NativePINVOKE.PxPvd_isConnected__SWIG_1(swigCPtr);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PxPvdTransport getTransport() {
    global::System.IntPtr cPtr = NativePINVOKE.PxPvd_getTransport(swigCPtr);
    PxPvdTransport ret = (cPtr == global::System.IntPtr.Zero) ? null : PxPvdTransport.getWrapper(cPtr, false);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PxPvdInstrumentationFlag getInstrumentationFlags() {
    PxPvdInstrumentationFlag ret = (PxPvdInstrumentationFlag)NativePINVOKE.PxPvd_getInstrumentationFlags(swigCPtr);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void release() {
    NativePINVOKE.PxPvd_release(swigCPtr);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

}

}
