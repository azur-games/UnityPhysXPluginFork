//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace NVIDIA.PhysX {

public partial class PxRigidActor : PxActor {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal PxRigidActor(global::System.IntPtr cPtr, bool cMemoryOwn) : base(NativePINVOKE.PxRigidActor_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(PxRigidActor obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static new PxRigidActor getWrapper(global::System.IntPtr cPtr, bool cMemoryOwn) {
      var wrapper = WrapperCache.find(cPtr);
      if (!(wrapper is PxRigidActor)) {
          wrapper = new PxRigidActor(cPtr, cMemoryOwn);
          WrapperCache.add(cPtr, wrapper);
      }
      return wrapper as PxRigidActor;
  }

  public  PxTransform  getGlobalPose() {
        global::System.IntPtr ptr = NativePINVOKE.PxRigidActor_getGlobalPose(swigCPtr);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
        //PxTransform ret = global::System.Runtime.InteropServices.Marshal.PtrToStructure<PxTransform>(ptr);
        PxTransform ret; unsafe { ret = *(PxTransform*)ptr; }
        return ret;
    }

  public  PxMat44  getGlobalMatrix() {
        global::System.IntPtr ptr = NativePINVOKE.PxRigidActor_getGlobalMatrix(swigCPtr);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
        //PxMat44 ret = global::System.Runtime.InteropServices.Marshal.PtrToStructure<PxMat44>(ptr);
        PxMat44 ret; unsafe { ret = *(PxMat44*)ptr; }
        return ret;
    }

  public void setGlobalPose( PxTransform  pose, bool autowake) {
    NativePINVOKE.PxRigidActor_setGlobalPose__SWIG_0(swigCPtr,  pose.swigCPtr , autowake);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setGlobalPose( PxTransform  pose) {
    NativePINVOKE.PxRigidActor_setGlobalPose__SWIG_1(swigCPtr,  pose.swigCPtr );
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool attachShape(PxShape shape) {
    bool ret = NativePINVOKE.PxRigidActor_attachShape(swigCPtr, PxShape.getCPtr(shape));
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void detachShape(PxShape shape, bool wakeOnLostTouch) {
    NativePINVOKE.PxRigidActor_detachShape__SWIG_0(swigCPtr, PxShape.getCPtr(shape), wakeOnLostTouch);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public void detachShape(PxShape shape) {
    NativePINVOKE.PxRigidActor_detachShape__SWIG_1(swigCPtr, PxShape.getCPtr(shape));
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public uint getNbShapes() {
    uint ret = NativePINVOKE.PxRigidActor_getNbShapes(swigCPtr);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PxShape getShape(uint index) {
    global::System.IntPtr cPtr = NativePINVOKE.PxRigidActor_getShape(swigCPtr, index);
    PxShape ret = (cPtr == global::System.IntPtr.Zero) ? null : PxShape.getWrapper(cPtr, false);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint getNbConstraints() {
    uint ret = NativePINVOKE.PxRigidActor_getNbConstraints(swigCPtr);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PxConstraint getConstraint(uint index) {
    global::System.IntPtr cPtr = NativePINVOKE.PxRigidActor_getConstraint(swigCPtr, index);
    PxConstraint ret = (cPtr == global::System.IntPtr.Zero) ? null : PxConstraint.getWrapper(cPtr, false);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PxShape createExclusiveShape(PxGeometry geometry, PxMaterial[] materials, ushort materialCount, PxShapeFlag shapeFlags) {
    global::System.IntPtr cPtr = NativePINVOKE.PxRigidActor_createExclusiveShape__SWIG_0(swigCPtr, PxGeometry.getCPtr(geometry), global::System.Array.ConvertAll(materials, x => PxMaterial.getCPtr(x)), materialCount, (int)shapeFlags);
    PxShape ret = (cPtr == global::System.IntPtr.Zero) ? null : PxShape.getWrapper(cPtr, false);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PxShape createExclusiveShape(PxGeometry geometry, PxMaterial[] materials, ushort materialCount) {
    global::System.IntPtr cPtr = NativePINVOKE.PxRigidActor_createExclusiveShape__SWIG_1(swigCPtr, PxGeometry.getCPtr(geometry), global::System.Array.ConvertAll(materials, x => PxMaterial.getCPtr(x)), materialCount);
    PxShape ret = (cPtr == global::System.IntPtr.Zero) ? null : PxShape.getWrapper(cPtr, false);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PxShape createExclusiveShape(PxGeometry geometry, PxMaterial material, PxShapeFlag shapeFlags) {
    global::System.IntPtr cPtr = NativePINVOKE.PxRigidActor_createExclusiveShape__SWIG_2(swigCPtr, PxGeometry.getCPtr(geometry), PxMaterial.getCPtr(material), (int)shapeFlags);
    PxShape ret = (cPtr == global::System.IntPtr.Zero) ? null : PxShape.getWrapper(cPtr, false);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PxShape createExclusiveShape(PxGeometry geometry, PxMaterial material) {
    global::System.IntPtr cPtr = NativePINVOKE.PxRigidActor_createExclusiveShape__SWIG_3(swigCPtr, PxGeometry.getCPtr(geometry), PxMaterial.getCPtr(material));
    PxShape ret = (cPtr == global::System.IntPtr.Zero) ? null : PxShape.getWrapper(cPtr, false);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
