//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace NVIDIA.PhysX {

[global::System.Runtime.InteropServices.StructLayout(global::System.Runtime.InteropServices.LayoutKind.Sequential)]
public partial struct PxDefaultSimulationFilterShader {

  

  internal global::System.IntPtr swigCPtr {
    get { unsafe { fixed(PxDefaultSimulationFilterShader* p = &this) return (global::System.IntPtr)p; } }
  }

  internal PxDefaultSimulationFilterShader(global::System.IntPtr ptr, bool unused) {
      //this = global::System.Runtime.InteropServices.Marshal.PtrToStructure<PxDefaultSimulationFilterShader>(ptr);
      unsafe { this = *(PxDefaultSimulationFilterShader*)ptr; }
  }
    
  public static PxSimulationFilterShader function {
        get { global::System.IntPtr ptr = NativePINVOKE.PxDefaultSimulationFilterShader_function_get();
      if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
              //PxSimulationFilterShader ret = global::System.Runtime.InteropServices.Marshal.PtrToStructure<PxSimulationFilterShader>(ptr);
              PxSimulationFilterShader ret; unsafe { ret = *(PxSimulationFilterShader*)ptr; }
              return ret; }
    
  }

  public static bool getGroupCollisionFlag(ushort group1, ushort group2) {
    bool ret = NativePINVOKE.PxDefaultSimulationFilterShader_getGroupCollisionFlag(group1, group2);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void setGroupCollisionFlag(ushort group1, ushort group2, bool enable) {
    NativePINVOKE.PxDefaultSimulationFilterShader_setGroupCollisionFlag(group1, group2, enable);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public static ushort getGroup(PxActor actor) {
    ushort ret = NativePINVOKE.PxDefaultSimulationFilterShader_getGroup(PxActor.getCPtr(actor));
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void setGroup(PxActor actor, ushort collisionGroup) {
    NativePINVOKE.PxDefaultSimulationFilterShader_setGroup(PxActor.getCPtr(actor), collisionGroup);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void getFilterOps(out PxFilterOp op0, out PxFilterOp op1, out PxFilterOp op2) {
    NativePINVOKE.PxDefaultSimulationFilterShader_getFilterOps(out op0, out op1, out op2);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void setFilterOps(PxFilterOp op0, PxFilterOp op1, PxFilterOp op2) {
    NativePINVOKE.PxDefaultSimulationFilterShader_setFilterOps((int)op0, (int)op1, (int)op2);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public static bool getFilterBool() {
    bool ret = NativePINVOKE.PxDefaultSimulationFilterShader_getFilterBool();
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void setFilterBool(bool enable) {
    NativePINVOKE.PxDefaultSimulationFilterShader_setFilterBool(enable);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void getFilterConstants( out PxGroupsMask  c0,  out PxGroupsMask  c1) {
    NativePINVOKE.PxDefaultSimulationFilterShader_getFilterConstants( out c0 ,  out c1 );
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void setFilterConstants( PxGroupsMask  c0,  PxGroupsMask  c1) {
    NativePINVOKE.PxDefaultSimulationFilterShader_setFilterConstants( c0.swigCPtr ,  c1.swigCPtr );
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public static  PxGroupsMask  getGroupsMask(PxActor actor) {
        global::System.IntPtr ptr = NativePINVOKE.PxDefaultSimulationFilterShader_getGroupsMask(PxActor.getCPtr(actor));
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
        //PxGroupsMask ret = global::System.Runtime.InteropServices.Marshal.PtrToStructure<PxGroupsMask>(ptr);
        PxGroupsMask ret; unsafe { ret = *(PxGroupsMask*)ptr; }
        return ret;
    }

  public static void setGroupsMask(PxActor actor,  PxGroupsMask  mask) {
    NativePINVOKE.PxDefaultSimulationFilterShader_setGroupsMask(PxActor.getCPtr(actor),  mask.swigCPtr );
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void setCallbacksEnabled(PxActor actor, bool yes) {
    NativePINVOKE.PxDefaultSimulationFilterShader_setCallbacksEnabled(PxActor.getCPtr(actor), yes);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public static bool getCallbacksEnabled(PxActor actor) {
    bool ret = NativePINVOKE.PxDefaultSimulationFilterShader_getCallbacksEnabled(PxActor.getCPtr(actor));
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
