//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace NVIDIA.PhysX {

public partial class PxArticulationJoint : PxArticulationJointBase {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal PxArticulationJoint(global::System.IntPtr cPtr, bool cMemoryOwn) : base(NativePINVOKE.PxArticulationJoint_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(PxArticulationJoint obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static new PxArticulationJoint getWrapper(global::System.IntPtr cPtr, bool cMemoryOwn) {
      var wrapper = WrapperCache.find(cPtr);
      if (!(wrapper is PxArticulationJoint)) {
          wrapper = new PxArticulationJoint(cPtr, cMemoryOwn);
          WrapperCache.add(cPtr, wrapper);
      }
      return wrapper as PxArticulationJoint;
  }

  public void setTargetOrientation( PxQuat  orientation) {
    NativePINVOKE.PxArticulationJoint_setTargetOrientation(swigCPtr,  orientation.swigCPtr );
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public  PxQuat  getTargetOrientation() {
        global::System.IntPtr ptr = NativePINVOKE.PxArticulationJoint_getTargetOrientation(swigCPtr);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
        //PxQuat ret = global::System.Runtime.InteropServices.Marshal.PtrToStructure<PxQuat>(ptr);
        PxQuat ret; unsafe { ret = *(PxQuat*)ptr; }
        return ret;
    }

  public void setTargetVelocity( PxVec3  velocity) {
    NativePINVOKE.PxArticulationJoint_setTargetVelocity(swigCPtr,  velocity.swigCPtr );
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public  PxVec3  getTargetVelocity() {
        global::System.IntPtr ptr = NativePINVOKE.PxArticulationJoint_getTargetVelocity(swigCPtr);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
        //PxVec3 ret = global::System.Runtime.InteropServices.Marshal.PtrToStructure<PxVec3>(ptr);
        PxVec3 ret; unsafe { ret = *(PxVec3*)ptr; }
        return ret;
    }

  public void setDriveType(PxArticulationJointDriveType driveType) {
    NativePINVOKE.PxArticulationJoint_setDriveType(swigCPtr, (int)driveType);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public PxArticulationJointDriveType getDriveType() {
    PxArticulationJointDriveType ret = (PxArticulationJointDriveType)NativePINVOKE.PxArticulationJoint_getDriveType(swigCPtr);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setStiffness(float spring) {
    NativePINVOKE.PxArticulationJoint_setStiffness(swigCPtr, spring);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public float getStiffness() {
    float ret = NativePINVOKE.PxArticulationJoint_getStiffness(swigCPtr);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setDamping(float damping) {
    NativePINVOKE.PxArticulationJoint_setDamping(swigCPtr, damping);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public float getDamping() {
    float ret = NativePINVOKE.PxArticulationJoint_getDamping(swigCPtr);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setInternalCompliance(float compliance) {
    NativePINVOKE.PxArticulationJoint_setInternalCompliance(swigCPtr, compliance);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public float getInternalCompliance() {
    float ret = NativePINVOKE.PxArticulationJoint_getInternalCompliance(swigCPtr);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setExternalCompliance(float compliance) {
    NativePINVOKE.PxArticulationJoint_setExternalCompliance(swigCPtr, compliance);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public float getExternalCompliance() {
    float ret = NativePINVOKE.PxArticulationJoint_getExternalCompliance(swigCPtr);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setSwingLimit(float zLimit, float yLimit) {
    NativePINVOKE.PxArticulationJoint_setSwingLimit(swigCPtr, zLimit, yLimit);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public void getSwingLimit(out float zLimit, out float yLimit) {
    NativePINVOKE.PxArticulationJoint_getSwingLimit(swigCPtr, out zLimit, out yLimit);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setTangentialStiffness(float spring) {
    NativePINVOKE.PxArticulationJoint_setTangentialStiffness(swigCPtr, spring);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public float getTangentialStiffness() {
    float ret = NativePINVOKE.PxArticulationJoint_getTangentialStiffness(swigCPtr);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setTangentialDamping(float damping) {
    NativePINVOKE.PxArticulationJoint_setTangentialDamping(swigCPtr, damping);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public float getTangentialDamping() {
    float ret = NativePINVOKE.PxArticulationJoint_getTangentialDamping(swigCPtr);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setSwingLimitContactDistance(float contactDistance) {
    NativePINVOKE.PxArticulationJoint_setSwingLimitContactDistance(swigCPtr, contactDistance);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public float getSwingLimitContactDistance() {
    float ret = NativePINVOKE.PxArticulationJoint_getSwingLimitContactDistance(swigCPtr);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setSwingLimitEnabled(bool enabled) {
    NativePINVOKE.PxArticulationJoint_setSwingLimitEnabled(swigCPtr, enabled);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool getSwingLimitEnabled() {
    bool ret = NativePINVOKE.PxArticulationJoint_getSwingLimitEnabled(swigCPtr);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setTwistLimit(float lower, float upper) {
    NativePINVOKE.PxArticulationJoint_setTwistLimit(swigCPtr, lower, upper);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public void getTwistLimit(out float lower, out float upper) {
    NativePINVOKE.PxArticulationJoint_getTwistLimit(swigCPtr, out lower, out upper);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setTwistLimitEnabled(bool enabled) {
    NativePINVOKE.PxArticulationJoint_setTwistLimitEnabled(swigCPtr, enabled);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool getTwistLimitEnabled() {
    bool ret = NativePINVOKE.PxArticulationJoint_getTwistLimitEnabled(swigCPtr);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setTwistLimitContactDistance(float contactDistance) {
    NativePINVOKE.PxArticulationJoint_setTwistLimitContactDistance(swigCPtr, contactDistance);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public float getTwistLimitContactDistance() {
    float ret = NativePINVOKE.PxArticulationJoint_getTwistLimitContactDistance(swigCPtr);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
