//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace NVIDIA.PhysX {

public partial class PxBase {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;
  public object userData;

  internal PxBase(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(PxBase obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static PxBase getWrapper(global::System.IntPtr cPtr, bool cMemoryOwn) {
      var wrapper = WrapperCache.find(cPtr);
      if (!(wrapper is PxBase)) {
          wrapper = new PxBase(cPtr, cMemoryOwn);
          WrapperCache.add(cPtr, wrapper);
      }
      return wrapper as PxBase;
  }

  ~PxBase() {
    WrapperCache.remove(swigCPtr.Handle, this);
  }

  public virtual void release() {
    NativePINVOKE.PxBase_release(swigCPtr);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual string getConcreteTypeName() {
    string ret = NativePINVOKE.PxBase_getConcreteTypeName(swigCPtr);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ushort getConcreteType() {
    ushort ret = NativePINVOKE.PxBase_getConcreteType(swigCPtr);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setBaseFlags(PxBaseFlag inFlags) {
    NativePINVOKE.PxBase_setBaseFlags(swigCPtr, (int)inFlags);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public PxBaseFlag getBaseFlags() {
    PxBaseFlag ret = (PxBaseFlag)NativePINVOKE.PxBase_getBaseFlags(swigCPtr);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PxRigidActor getRigidActor() {
    global::System.IntPtr cPtr = NativePINVOKE.PxBase_getRigidActor(swigCPtr);
    PxRigidActor ret = (cPtr == global::System.IntPtr.Zero) ? null : PxRigidActor.getWrapper(cPtr, false);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PxRigidStatic getRigidStatic() {
    global::System.IntPtr cPtr = NativePINVOKE.PxBase_getRigidStatic(swigCPtr);
    PxRigidStatic ret = (cPtr == global::System.IntPtr.Zero) ? null : PxRigidStatic.getWrapper(cPtr, false);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PxRigidBody getRigidBody() {
    global::System.IntPtr cPtr = NativePINVOKE.PxBase_getRigidBody(swigCPtr);
    PxRigidBody ret = (cPtr == global::System.IntPtr.Zero) ? null : PxRigidBody.getWrapper(cPtr, false);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PxRigidDynamic getRigidDynamic() {
    global::System.IntPtr cPtr = NativePINVOKE.PxBase_getRigidDynamic(swigCPtr);
    PxRigidDynamic ret = (cPtr == global::System.IntPtr.Zero) ? null : PxRigidDynamic.getWrapper(cPtr, false);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PxArticulationLink getArticulationLink() {
    global::System.IntPtr cPtr = NativePINVOKE.PxBase_getArticulationLink(swigCPtr);
    PxArticulationLink ret = (cPtr == global::System.IntPtr.Zero) ? null : PxArticulationLink.getWrapper(cPtr, false);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PxConvexMesh getConvexMesh() {
    global::System.IntPtr cPtr = NativePINVOKE.PxBase_getConvexMesh(swigCPtr);
    PxConvexMesh ret = (cPtr == global::System.IntPtr.Zero) ? null : PxConvexMesh.getWrapper(cPtr, false);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PxTriangleMesh getTriangleMesh() {
    global::System.IntPtr cPtr = NativePINVOKE.PxBase_getTriangleMesh(swigCPtr);
    PxTriangleMesh ret = (cPtr == global::System.IntPtr.Zero) ? null : PxTriangleMesh.getWrapper(cPtr, false);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PxHeightField getHeightField() {
    global::System.IntPtr cPtr = NativePINVOKE.PxBase_getHeightField(swigCPtr);
    PxHeightField ret = (cPtr == global::System.IntPtr.Zero) ? null : PxHeightField.getWrapper(cPtr, false);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PxMaterial getMaterial() {
    global::System.IntPtr cPtr = NativePINVOKE.PxBase_getMaterial(swigCPtr);
    PxMaterial ret = (cPtr == global::System.IntPtr.Zero) ? null : PxMaterial.getWrapper(cPtr, false);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool isReleasable() {
    bool ret = NativePINVOKE.PxBase_isReleasable(swigCPtr);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
