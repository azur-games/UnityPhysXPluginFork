//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace NVIDIA.PhysX {

public partial class PxTriangleMesh : PxBase {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal PxTriangleMesh(global::System.IntPtr cPtr, bool cMemoryOwn) : base(NativePINVOKE.PxTriangleMesh_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(PxTriangleMesh obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static new PxTriangleMesh getWrapper(global::System.IntPtr cPtr, bool cMemoryOwn) {
      var wrapper = WrapperCache.find(cPtr);
      if (!(wrapper is PxTriangleMesh)) {
          wrapper = new PxTriangleMesh(cPtr, cMemoryOwn);
          WrapperCache.add(cPtr, wrapper);
      }
      return wrapper as PxTriangleMesh;
  }

  public uint getNbVertices() {
    uint ret = NativePINVOKE.PxTriangleMesh_getNbVertices(swigCPtr);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public  PxVec3  getVertex(uint index) {
        global::System.IntPtr ptr = NativePINVOKE.PxTriangleMesh_getVertex(swigCPtr, index);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
        //PxVec3 ret = global::System.Runtime.InteropServices.Marshal.PtrToStructure<PxVec3>(ptr);
        PxVec3 ret; unsafe { ret = *(PxVec3*)ptr; }
        return ret;
    }

  public void setVertex(uint index,  PxVec3  position) {
    NativePINVOKE.PxTriangleMesh_setVertex(swigCPtr, index,  position.swigCPtr );
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public  PxBounds3  refitBVH() {
        global::System.IntPtr ptr = NativePINVOKE.PxTriangleMesh_refitBVH(swigCPtr);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
        //PxBounds3 ret = global::System.Runtime.InteropServices.Marshal.PtrToStructure<PxBounds3>(ptr);
        PxBounds3 ret; unsafe { ret = *(PxBounds3*)ptr; }
        return ret;
    }

  public uint getNbTriangles() {
    uint ret = NativePINVOKE.PxTriangleMesh_getNbTriangles(swigCPtr);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int getTriangleVertex(uint index, uint vertexIndex) {
    int ret = NativePINVOKE.PxTriangleMesh_getTriangleVertex(swigCPtr, index, vertexIndex);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PxTriangleMeshFlag getTriangleMeshFlags() {
    PxTriangleMeshFlag ret = (PxTriangleMeshFlag)NativePINVOKE.PxTriangleMesh_getTriangleMeshFlags(swigCPtr);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ushort getTriangleMaterialIndex(uint triangleIndex) {
    ushort ret = NativePINVOKE.PxTriangleMesh_getTriangleMaterialIndex(swigCPtr, triangleIndex);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public  PxBounds3  getLocalBounds() {
        global::System.IntPtr ptr = NativePINVOKE.PxTriangleMesh_getLocalBounds(swigCPtr);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
        //PxBounds3 ret = global::System.Runtime.InteropServices.Marshal.PtrToStructure<PxBounds3>(ptr);
        PxBounds3 ret; unsafe { ret = *(PxBounds3*)ptr; }
        return ret;
    }

  public uint getReferenceCount() {
    uint ret = NativePINVOKE.PxTriangleMesh_getReferenceCount(swigCPtr);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void acquireReference() {
    NativePINVOKE.PxTriangleMesh_acquireReference(swigCPtr);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

}

}
