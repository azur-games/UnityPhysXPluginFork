//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

using System.Runtime.InteropServices;
using System.Security;
using AOT;

namespace NVIDIA.PhysX {

public partial class PxSimulationFilterCallback {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal PxSimulationFilterCallback(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(PxSimulationFilterCallback obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~PxSimulationFilterCallback() {
    destroy();
  }

  public virtual void destroy() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          NativePINVOKE.delete_PxSimulationFilterCallback(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public PxSimulationFilterCallback() : this(NativePINVOKE.new_PxSimulationFilterCallback(), true) {
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    SwigDirectorConnect();
  }

  public virtual void pairLost(uint pairID, bool objectRemoved, uint attributes0,  PxFilterData  filterData0, uint attributes1,  PxFilterData  filterData1) {
    if (SwigDerivedClassHasMethod("pairLost", swigMethodTypes0)) NativePINVOKE.PxSimulationFilterCallback_pairLostSwigExplicitPxSimulationFilterCallback(swigCPtr, pairID, objectRemoved, attributes0,  filterData0.swigCPtr , attributes1,  filterData1.swigCPtr ); else NativePINVOKE.PxSimulationFilterCallback_pairLost(swigCPtr, pairID, objectRemoved, attributes0,  filterData0.swigCPtr , attributes1,  filterData1.swigCPtr );
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  private void SwigDirectorConnect() {
    if (SwigDerivedClassHasMethod("pairLost", swigMethodTypes0))
      swigDelegate0 = new SwigDelegatePxSimulationFilterCallback_0(SwigDirectorMethodpairLost);
    NativePINVOKE.PxSimulationFilterCallback_director_connect(swigCPtr, swigDelegate0);
  }

  private bool SwigDerivedClassHasMethod(string methodName, global::System.Type[] methodTypes) {
    global::System.Reflection.MethodInfo methodInfo = this.GetType().GetMethod(methodName, global::System.Reflection.BindingFlags.Public | global::System.Reflection.BindingFlags.NonPublic | global::System.Reflection.BindingFlags.Instance, null, methodTypes, null);
    bool hasDerivedMethod = methodInfo.DeclaringType.IsSubclassOf(typeof(PxSimulationFilterCallback));
    return hasDerivedMethod;
  }

  [MonoPInvokeCallback(typeof(SwigDelegatePxSimulationFilterCallback_0))]
  static private void SwigDirectorMethodpairLost(global::System.IntPtr instPtr, uint pairID, bool objectRemoved, uint attributes0, global::System.IntPtr filterData0, uint attributes1, global::System.IntPtr filterData1) {
    var ms = GCHandle.FromIntPtr(instPtr).Target as PxSimulationFilterCallback;
    ms.pairLost(pairID, objectRemoved, attributes0, new PxFilterData(filterData0, false), attributes1, new PxFilterData(filterData1, false));
  }
  
  [UnmanagedFunctionPointer(CallingConvention.Cdecl), SuppressUnmanagedCodeSecurity]
  public delegate void SwigDelegatePxSimulationFilterCallback_0(global::System.IntPtr instPtr, uint pairID, bool objectRemoved, uint attributes0, global::System.IntPtr filterData0, uint attributes1, global::System.IntPtr filterData1);

  private SwigDelegatePxSimulationFilterCallback_0 swigDelegate0;

  private static global::System.Type[] swigMethodTypes0 = new global::System.Type[] { typeof(uint), typeof(bool), typeof(uint), typeof( PxFilterData ), typeof(uint), typeof( PxFilterData ) };
}

}
