//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace NVIDIA.PhysX {

public partial class PxMeshScale {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal PxMeshScale(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(PxMeshScale obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~PxMeshScale() {
    destroy();
  }

  public virtual void destroy() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          NativePINVOKE.delete_PxMeshScale(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public PxMeshScale() : this(NativePINVOKE.new_PxMeshScale__SWIG_0(), true) {
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public PxMeshScale(float r) : this(NativePINVOKE.new_PxMeshScale__SWIG_1(r), true) {
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public PxMeshScale( PxVec3  s) : this(NativePINVOKE.new_PxMeshScale__SWIG_2( s.swigCPtr ), true) {
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public PxMeshScale( PxVec3  s,  PxQuat  r) : this(NativePINVOKE.new_PxMeshScale__SWIG_3( s.swigCPtr ,  r.swigCPtr ), true) {
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool isIdentity() {
    bool ret = NativePINVOKE.PxMeshScale_isIdentity(swigCPtr);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PxMeshScale getInverse() {
    PxMeshScale ret = new PxMeshScale(NativePINVOKE.PxMeshScale_getInverse(swigCPtr), true);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public  PxMat33  toMat33() {
        global::System.IntPtr ptr = NativePINVOKE.PxMeshScale_toMat33(swigCPtr);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
        //PxMat33 ret = global::System.Runtime.InteropServices.Marshal.PtrToStructure<PxMat33>(ptr);
        PxMat33 ret; unsafe { ret = *(PxMat33*)ptr; }
        return ret;
    }

  public bool hasNegativeDeterminant() {
    bool ret = NativePINVOKE.PxMeshScale_hasNegativeDeterminant(swigCPtr);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public  PxVec3  transform( PxVec3  v) {
        global::System.IntPtr ptr = NativePINVOKE.PxMeshScale_transform(swigCPtr,  v.swigCPtr );
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
        //PxVec3 ret = global::System.Runtime.InteropServices.Marshal.PtrToStructure<PxVec3>(ptr);
        PxVec3 ret; unsafe { ret = *(PxVec3*)ptr; }
        return ret;
    }

  public bool isValidForTriangleMesh() {
    bool ret = NativePINVOKE.PxMeshScale_isValidForTriangleMesh(swigCPtr);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool isValidForConvexMesh() {
    bool ret = NativePINVOKE.PxMeshScale_isValidForConvexMesh(swigCPtr);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PxVec3 scale {
    set {
      NativePINVOKE.PxMeshScale_scale_set(swigCPtr,  value.swigCPtr );
      if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    } 
        get { global::System.IntPtr ptr = NativePINVOKE.PxMeshScale_scale_get(swigCPtr);
      if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
              //PxVec3 ret = global::System.Runtime.InteropServices.Marshal.PtrToStructure<PxVec3>(ptr);
              PxVec3 ret; unsafe { ret = *(PxVec3*)ptr; }
              return ret; }
    
  }

  public PxQuat rotation {
    set {
      NativePINVOKE.PxMeshScale_rotation_set(swigCPtr,  value.swigCPtr );
      if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    } 
        get { global::System.IntPtr ptr = NativePINVOKE.PxMeshScale_rotation_get(swigCPtr);
      if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
              //PxQuat ret = global::System.Runtime.InteropServices.Marshal.PtrToStructure<PxQuat>(ptr);
              PxQuat ret; unsafe { ret = *(PxQuat*)ptr; }
              return ret; }
    
  }

}

}
