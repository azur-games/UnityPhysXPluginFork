//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace NVIDIA.PhysX {

public partial class PxSphericalJoint : PxJoint {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal PxSphericalJoint(global::System.IntPtr cPtr, bool cMemoryOwn) : base(NativePINVOKE.PxSphericalJoint_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(PxSphericalJoint obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static new PxSphericalJoint getWrapper(global::System.IntPtr cPtr, bool cMemoryOwn) {
      var wrapper = WrapperCache.find(cPtr);
      if (!(wrapper is PxSphericalJoint)) {
          wrapper = new PxSphericalJoint(cPtr, cMemoryOwn);
          WrapperCache.add(cPtr, wrapper);
      }
      return wrapper as PxSphericalJoint;
  }

  public PxJointLimitCone getLimitCone() {
    PxJointLimitCone ret = new PxJointLimitCone(NativePINVOKE.PxSphericalJoint_getLimitCone(swigCPtr), true);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setLimitCone(PxJointLimitCone limit) {
    NativePINVOKE.PxSphericalJoint_setLimitCone(swigCPtr, PxJointLimitCone.getCPtr(limit));
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public float getSwingYAngle() {
    float ret = NativePINVOKE.PxSphericalJoint_getSwingYAngle(swigCPtr);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public float getSwingZAngle() {
    float ret = NativePINVOKE.PxSphericalJoint_getSwingZAngle(swigCPtr);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setSphericalJointFlags(PxSphericalJointFlag flags) {
    NativePINVOKE.PxSphericalJoint_setSphericalJointFlags(swigCPtr, (int)flags);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setSphericalJointFlag(PxSphericalJointFlag flag, bool value) {
    NativePINVOKE.PxSphericalJoint_setSphericalJointFlag(swigCPtr, (int)flag, value);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public PxSphericalJointFlag getSphericalJointFlags() {
    PxSphericalJointFlag ret = (PxSphericalJointFlag)NativePINVOKE.PxSphericalJoint_getSphericalJointFlags(swigCPtr);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setProjectionLinearTolerance(float tolerance) {
    NativePINVOKE.PxSphericalJoint_setProjectionLinearTolerance(swigCPtr, tolerance);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public float getProjectionLinearTolerance() {
    float ret = NativePINVOKE.PxSphericalJoint_getProjectionLinearTolerance(swigCPtr);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
