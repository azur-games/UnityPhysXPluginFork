//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace NVIDIA.PhysX {

public partial class PxArticulationReducedCoordinate : PxArticulationBase {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal PxArticulationReducedCoordinate(global::System.IntPtr cPtr, bool cMemoryOwn) : base(NativePINVOKE.PxArticulationReducedCoordinate_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(PxArticulationReducedCoordinate obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static new PxArticulationReducedCoordinate getWrapper(global::System.IntPtr cPtr, bool cMemoryOwn) {
      var wrapper = WrapperCache.find(cPtr);
      if (!(wrapper is PxArticulationReducedCoordinate)) {
          wrapper = new PxArticulationReducedCoordinate(cPtr, cMemoryOwn);
          WrapperCache.add(cPtr, wrapper);
      }
      return wrapper as PxArticulationReducedCoordinate;
  }

  public void setArticulationFlags(PxArticulationFlag flags) {
    NativePINVOKE.PxArticulationReducedCoordinate_setArticulationFlags(swigCPtr, (int)flags);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setArticulationFlag(PxArticulationFlag flag, bool value) {
    NativePINVOKE.PxArticulationReducedCoordinate_setArticulationFlag(swigCPtr, (int)flag, value);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public PxArticulationFlag getArticulationFlags() {
    PxArticulationFlag ret = (PxArticulationFlag)NativePINVOKE.PxArticulationReducedCoordinate_getArticulationFlags(swigCPtr);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint getDofs() {
    uint ret = NativePINVOKE.PxArticulationReducedCoordinate_getDofs(swigCPtr);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PxArticulationCache createCache() {
    global::System.IntPtr cPtr = NativePINVOKE.PxArticulationReducedCoordinate_createCache(swigCPtr);
    PxArticulationCache ret = (cPtr == global::System.IntPtr.Zero) ? null : new PxArticulationCache(cPtr, false);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint getCacheDataSize() {
    uint ret = NativePINVOKE.PxArticulationReducedCoordinate_getCacheDataSize(swigCPtr);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void zeroCache(PxArticulationCache cache) {
    NativePINVOKE.PxArticulationReducedCoordinate_zeroCache(swigCPtr, PxArticulationCache.getCPtr(cache));
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public void applyCache(PxArticulationCache cache, PxArticulationCache.Flags flag, bool autowake) {
    NativePINVOKE.PxArticulationReducedCoordinate_applyCache__SWIG_0(swigCPtr, PxArticulationCache.getCPtr(cache), (int)flag, autowake);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public void applyCache(PxArticulationCache cache, PxArticulationCache.Flags flag) {
    NativePINVOKE.PxArticulationReducedCoordinate_applyCache__SWIG_1(swigCPtr, PxArticulationCache.getCPtr(cache), (int)flag);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public void copyInternalStateToCache(PxArticulationCache cache, PxArticulationCache.Flags flag) {
    NativePINVOKE.PxArticulationReducedCoordinate_copyInternalStateToCache(swigCPtr, PxArticulationCache.getCPtr(cache), (int)flag);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public void releaseCache(PxArticulationCache cache) {
    NativePINVOKE.PxArticulationReducedCoordinate_releaseCache(swigCPtr, PxArticulationCache.getCPtr(cache));
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public void commonInit() {
    NativePINVOKE.PxArticulationReducedCoordinate_commonInit(swigCPtr);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public void computeGeneralizedGravityForce(PxArticulationCache cache) {
    NativePINVOKE.PxArticulationReducedCoordinate_computeGeneralizedGravityForce(swigCPtr, PxArticulationCache.getCPtr(cache));
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public void computeCoriolisAndCentrifugalForce(PxArticulationCache cache) {
    NativePINVOKE.PxArticulationReducedCoordinate_computeCoriolisAndCentrifugalForce(swigCPtr, PxArticulationCache.getCPtr(cache));
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public void computeGeneralizedExternalForce(PxArticulationCache cache) {
    NativePINVOKE.PxArticulationReducedCoordinate_computeGeneralizedExternalForce(swigCPtr, PxArticulationCache.getCPtr(cache));
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public void computeJointAcceleration(PxArticulationCache cache) {
    NativePINVOKE.PxArticulationReducedCoordinate_computeJointAcceleration(swigCPtr, PxArticulationCache.getCPtr(cache));
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public void computeJointForce(PxArticulationCache cache) {
    NativePINVOKE.PxArticulationReducedCoordinate_computeJointForce(swigCPtr, PxArticulationCache.getCPtr(cache));
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public void computeDenseJacobian(PxArticulationCache cache, out uint nRows, out uint nCols) {
    NativePINVOKE.PxArticulationReducedCoordinate_computeDenseJacobian(swigCPtr, PxArticulationCache.getCPtr(cache), out nRows, out nCols);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public void computeCoefficientMatrix(PxArticulationCache cache) {
    NativePINVOKE.PxArticulationReducedCoordinate_computeCoefficientMatrix(swigCPtr, PxArticulationCache.getCPtr(cache));
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public void computeGeneralizedMassMatrix(PxArticulationCache cache) {
    NativePINVOKE.PxArticulationReducedCoordinate_computeGeneralizedMassMatrix(swigCPtr, PxArticulationCache.getCPtr(cache));
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public void addLoopJoint(PxJoint joint) {
    NativePINVOKE.PxArticulationReducedCoordinate_addLoopJoint(swigCPtr, PxJoint.getCPtr(joint));
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public void removeLoopJoint(PxJoint joint) {
    NativePINVOKE.PxArticulationReducedCoordinate_removeLoopJoint(swigCPtr, PxJoint.getCPtr(joint));
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public uint getNbLoopJoints() {
    uint ret = NativePINVOKE.PxArticulationReducedCoordinate_getNbLoopJoints(swigCPtr);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PxJoint getLoopJoint(uint index) {
    global::System.IntPtr cPtr = NativePINVOKE.PxArticulationReducedCoordinate_getLoopJoint(swigCPtr, index);
    PxJoint ret = (cPtr == global::System.IntPtr.Zero) ? null : PxJoint.getWrapper(cPtr, false);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint getCoefficientMatrixSize() {
    uint ret = NativePINVOKE.PxArticulationReducedCoordinate_getCoefficientMatrixSize(swigCPtr);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void teleportRootLink( PxTransform  pose, bool autowake) {
    NativePINVOKE.PxArticulationReducedCoordinate_teleportRootLink(swigCPtr,  pose.swigCPtr , autowake);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

}

}
