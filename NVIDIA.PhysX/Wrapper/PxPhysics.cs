//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace NVIDIA.PhysX {

public partial class PxPhysics {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;
  public object userData;

  internal PxPhysics(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(PxPhysics obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static PxPhysics getWrapper(global::System.IntPtr cPtr, bool cMemoryOwn) {
      var wrapper = WrapperCache.find(cPtr);
      if (!(wrapper is PxPhysics)) {
          wrapper = new PxPhysics(cPtr, cMemoryOwn);
          WrapperCache.add(cPtr, wrapper);
      }
      return wrapper as PxPhysics;
  }

  ~PxPhysics() {
    WrapperCache.remove(swigCPtr.Handle, this);
  }

  public void release() {
    NativePINVOKE.PxPhysics_release(swigCPtr);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public PxFoundation getFoundation() {
    PxFoundation ret = PxFoundation.getWrapper(NativePINVOKE.PxPhysics_getFoundation(swigCPtr), false);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PxAggregate createAggregate(uint maxSize, bool enableSelfCollision) {
    global::System.IntPtr cPtr = NativePINVOKE.PxPhysics_createAggregate(swigCPtr, maxSize, enableSelfCollision);
    PxAggregate ret = (cPtr == global::System.IntPtr.Zero) ? null : PxAggregate.getWrapper(cPtr, false);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PxTolerancesScale getTolerancesScale() {
    PxTolerancesScale ret = new PxTolerancesScale(NativePINVOKE.PxPhysics_getTolerancesScale(swigCPtr), false);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PxTriangleMesh createTriangleMesh(PxInputStream stream) {
    global::System.IntPtr cPtr = NativePINVOKE.PxPhysics_createTriangleMesh(swigCPtr, PxInputStream.getCPtr(stream));
    PxTriangleMesh ret = (cPtr == global::System.IntPtr.Zero) ? null : PxTriangleMesh.getWrapper(cPtr, false);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint getNbTriangleMeshes() {
    uint ret = NativePINVOKE.PxPhysics_getNbTriangleMeshes(swigCPtr);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PxTriangleMesh getTriangleMesh(uint index) {
    global::System.IntPtr cPtr = NativePINVOKE.PxPhysics_getTriangleMesh(swigCPtr, index);
    PxTriangleMesh ret = (cPtr == global::System.IntPtr.Zero) ? null : PxTriangleMesh.getWrapper(cPtr, false);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PxHeightField createHeightField(PxInputStream stream) {
    global::System.IntPtr cPtr = NativePINVOKE.PxPhysics_createHeightField(swigCPtr, PxInputStream.getCPtr(stream));
    PxHeightField ret = (cPtr == global::System.IntPtr.Zero) ? null : PxHeightField.getWrapper(cPtr, false);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint getNbHeightFields() {
    uint ret = NativePINVOKE.PxPhysics_getNbHeightFields(swigCPtr);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PxHeightField getHeightField(uint index) {
    global::System.IntPtr cPtr = NativePINVOKE.PxPhysics_getHeightField(swigCPtr, index);
    PxHeightField ret = (cPtr == global::System.IntPtr.Zero) ? null : PxHeightField.getWrapper(cPtr, false);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PxConvexMesh createConvexMesh(PxInputStream stream) {
    global::System.IntPtr cPtr = NativePINVOKE.PxPhysics_createConvexMesh(swigCPtr, PxInputStream.getCPtr(stream));
    PxConvexMesh ret = (cPtr == global::System.IntPtr.Zero) ? null : PxConvexMesh.getWrapper(cPtr, false);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint getNbConvexMeshes() {
    uint ret = NativePINVOKE.PxPhysics_getNbConvexMeshes(swigCPtr);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PxConvexMesh getConvexMesh(uint index) {
    global::System.IntPtr cPtr = NativePINVOKE.PxPhysics_getConvexMesh(swigCPtr, index);
    PxConvexMesh ret = (cPtr == global::System.IntPtr.Zero) ? null : PxConvexMesh.getWrapper(cPtr, false);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PxBVHStructure createBVHStructure(PxInputStream stream) {
    global::System.IntPtr cPtr = NativePINVOKE.PxPhysics_createBVHStructure(swigCPtr, PxInputStream.getCPtr(stream));
    PxBVHStructure ret = (cPtr == global::System.IntPtr.Zero) ? null : PxBVHStructure.getWrapper(cPtr, false);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint getNbBVHStructures() {
    uint ret = NativePINVOKE.PxPhysics_getNbBVHStructures(swigCPtr);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PxBVHStructure getBVHStructure(uint index) {
    global::System.IntPtr cPtr = NativePINVOKE.PxPhysics_getBVHStructure(swigCPtr, index);
    PxBVHStructure ret = (cPtr == global::System.IntPtr.Zero) ? null : PxBVHStructure.getWrapper(cPtr, false);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PxScene createScene(PxSceneDesc sceneDesc) {
    global::System.IntPtr cPtr = NativePINVOKE.PxPhysics_createScene(swigCPtr, PxSceneDesc.getCPtr(sceneDesc));
    PxScene ret = (cPtr == global::System.IntPtr.Zero) ? null : PxScene.getWrapper(cPtr, false);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint getNbScenes() {
    uint ret = NativePINVOKE.PxPhysics_getNbScenes(swigCPtr);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PxScene getScene(uint index) {
    global::System.IntPtr cPtr = NativePINVOKE.PxPhysics_getScene(swigCPtr, index);
    PxScene ret = (cPtr == global::System.IntPtr.Zero) ? null : PxScene.getWrapper(cPtr, false);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PxRigidStatic createRigidStatic( PxTransform  pose) {
    global::System.IntPtr cPtr = NativePINVOKE.PxPhysics_createRigidStatic(swigCPtr,  pose.swigCPtr );
    PxRigidStatic ret = (cPtr == global::System.IntPtr.Zero) ? null : PxRigidStatic.getWrapper(cPtr, false);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PxRigidDynamic createRigidDynamic( PxTransform  pose) {
    global::System.IntPtr cPtr = NativePINVOKE.PxPhysics_createRigidDynamic(swigCPtr,  pose.swigCPtr );
    PxRigidDynamic ret = (cPtr == global::System.IntPtr.Zero) ? null : PxRigidDynamic.getWrapper(cPtr, false);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PxPruningStructure createPruningStructure(PxRigidActor[] actors, uint nbActors) {
    global::System.IntPtr cPtr = NativePINVOKE.PxPhysics_createPruningStructure(swigCPtr, global::System.Array.ConvertAll(actors, x => PxRigidActor.getCPtr(x)), nbActors);
    PxPruningStructure ret = (cPtr == global::System.IntPtr.Zero) ? null : PxPruningStructure.getWrapper(cPtr, false);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PxShape createShape(PxGeometry geometry, PxMaterial material, bool isExclusive, PxShapeFlag shapeFlags) {
    global::System.IntPtr cPtr = NativePINVOKE.PxPhysics_createShape__SWIG_0(swigCPtr, PxGeometry.getCPtr(geometry), PxMaterial.getCPtr(material), isExclusive, (int)shapeFlags);
    PxShape ret = (cPtr == global::System.IntPtr.Zero) ? null : PxShape.getWrapper(cPtr, false);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PxShape createShape(PxGeometry geometry, PxMaterial material, bool isExclusive) {
    global::System.IntPtr cPtr = NativePINVOKE.PxPhysics_createShape__SWIG_1(swigCPtr, PxGeometry.getCPtr(geometry), PxMaterial.getCPtr(material), isExclusive);
    PxShape ret = (cPtr == global::System.IntPtr.Zero) ? null : PxShape.getWrapper(cPtr, false);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PxShape createShape(PxGeometry geometry, PxMaterial material) {
    global::System.IntPtr cPtr = NativePINVOKE.PxPhysics_createShape__SWIG_2(swigCPtr, PxGeometry.getCPtr(geometry), PxMaterial.getCPtr(material));
    PxShape ret = (cPtr == global::System.IntPtr.Zero) ? null : PxShape.getWrapper(cPtr, false);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PxShape createShape(PxGeometry geometry, PxMaterial[] materials, ushort materialCount, bool isExclusive, PxShapeFlag shapeFlags) {
    global::System.IntPtr cPtr = NativePINVOKE.PxPhysics_createShape__SWIG_3(swigCPtr, PxGeometry.getCPtr(geometry), global::System.Array.ConvertAll(materials, x => PxMaterial.getCPtr(x)), materialCount, isExclusive, (int)shapeFlags);
    PxShape ret = (cPtr == global::System.IntPtr.Zero) ? null : PxShape.getWrapper(cPtr, false);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PxShape createShape(PxGeometry geometry, PxMaterial[] materials, ushort materialCount, bool isExclusive) {
    global::System.IntPtr cPtr = NativePINVOKE.PxPhysics_createShape__SWIG_4(swigCPtr, PxGeometry.getCPtr(geometry), global::System.Array.ConvertAll(materials, x => PxMaterial.getCPtr(x)), materialCount, isExclusive);
    PxShape ret = (cPtr == global::System.IntPtr.Zero) ? null : PxShape.getWrapper(cPtr, false);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PxShape createShape(PxGeometry geometry, PxMaterial[] materials, ushort materialCount) {
    global::System.IntPtr cPtr = NativePINVOKE.PxPhysics_createShape__SWIG_5(swigCPtr, PxGeometry.getCPtr(geometry), global::System.Array.ConvertAll(materials, x => PxMaterial.getCPtr(x)), materialCount);
    PxShape ret = (cPtr == global::System.IntPtr.Zero) ? null : PxShape.getWrapper(cPtr, false);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint getNbShapes() {
    uint ret = NativePINVOKE.PxPhysics_getNbShapes(swigCPtr);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PxShape getShape(uint index) {
    global::System.IntPtr cPtr = NativePINVOKE.PxPhysics_getShape(swigCPtr, index);
    PxShape ret = (cPtr == global::System.IntPtr.Zero) ? null : PxShape.getWrapper(cPtr, false);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PxFixedJoint createFixedJoint(PxRigidActor actor0,  PxTransform  localFrame0, PxRigidActor actor1,  PxTransform  localFrame1) {
    global::System.IntPtr cPtr = NativePINVOKE.PxPhysics_createFixedJoint(swigCPtr, PxRigidActor.getCPtr(actor0),  localFrame0.swigCPtr , PxRigidActor.getCPtr(actor1),  localFrame1.swigCPtr );
    PxFixedJoint ret = (cPtr == global::System.IntPtr.Zero) ? null : PxFixedJoint.getWrapper(cPtr, false);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PxRevoluteJoint createRevoluteJoint(PxRigidActor actor0,  PxTransform  localFrame0, PxRigidActor actor1,  PxTransform  localFrame1) {
    global::System.IntPtr cPtr = NativePINVOKE.PxPhysics_createRevoluteJoint(swigCPtr, PxRigidActor.getCPtr(actor0),  localFrame0.swigCPtr , PxRigidActor.getCPtr(actor1),  localFrame1.swigCPtr );
    PxRevoluteJoint ret = (cPtr == global::System.IntPtr.Zero) ? null : PxRevoluteJoint.getWrapper(cPtr, false);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PxDistanceJoint createDistanceJoint(PxRigidActor actor0,  PxTransform  localFrame0, PxRigidActor actor1,  PxTransform  localFrame1) {
    global::System.IntPtr cPtr = NativePINVOKE.PxPhysics_createDistanceJoint(swigCPtr, PxRigidActor.getCPtr(actor0),  localFrame0.swigCPtr , PxRigidActor.getCPtr(actor1),  localFrame1.swigCPtr );
    PxDistanceJoint ret = (cPtr == global::System.IntPtr.Zero) ? null : PxDistanceJoint.getWrapper(cPtr, false);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PxSphericalJoint createSphericalJoint(PxRigidActor actor0,  PxTransform  localFrame0, PxRigidActor actor1,  PxTransform  localFrame1) {
    global::System.IntPtr cPtr = NativePINVOKE.PxPhysics_createSphericalJoint(swigCPtr, PxRigidActor.getCPtr(actor0),  localFrame0.swigCPtr , PxRigidActor.getCPtr(actor1),  localFrame1.swigCPtr );
    PxSphericalJoint ret = (cPtr == global::System.IntPtr.Zero) ? null : PxSphericalJoint.getWrapper(cPtr, false);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PxPrismaticJoint createPrismaticJoint(PxRigidActor actor0,  PxTransform  localFrame0, PxRigidActor actor1,  PxTransform  localFrame1) {
    global::System.IntPtr cPtr = NativePINVOKE.PxPhysics_createPrismaticJoint(swigCPtr, PxRigidActor.getCPtr(actor0),  localFrame0.swigCPtr , PxRigidActor.getCPtr(actor1),  localFrame1.swigCPtr );
    PxPrismaticJoint ret = (cPtr == global::System.IntPtr.Zero) ? null : PxPrismaticJoint.getWrapper(cPtr, false);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PxD6Joint createD6Joint(PxRigidActor actor0,  PxTransform  localFrame0, PxRigidActor actor1,  PxTransform  localFrame1) {
    global::System.IntPtr cPtr = NativePINVOKE.PxPhysics_createD6Joint(swigCPtr, PxRigidActor.getCPtr(actor0),  localFrame0.swigCPtr , PxRigidActor.getCPtr(actor1),  localFrame1.swigCPtr );
    PxD6Joint ret = (cPtr == global::System.IntPtr.Zero) ? null : PxD6Joint.getWrapper(cPtr, false);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PxArticulation createArticulation() {
    global::System.IntPtr cPtr = NativePINVOKE.PxPhysics_createArticulation(swigCPtr);
    PxArticulation ret = (cPtr == global::System.IntPtr.Zero) ? null : PxArticulation.getWrapper(cPtr, false);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PxArticulationReducedCoordinate createArticulationReducedCoordinate() {
    global::System.IntPtr cPtr = NativePINVOKE.PxPhysics_createArticulationReducedCoordinate(swigCPtr);
    PxArticulationReducedCoordinate ret = (cPtr == global::System.IntPtr.Zero) ? null : PxArticulationReducedCoordinate.getWrapper(cPtr, false);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PxMaterial createMaterial(float staticFriction, float dynamicFriction, float restitution) {
    global::System.IntPtr cPtr = NativePINVOKE.PxPhysics_createMaterial(swigCPtr, staticFriction, dynamicFriction, restitution);
    PxMaterial ret = (cPtr == global::System.IntPtr.Zero) ? null : PxMaterial.getWrapper(cPtr, false);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint getNbMaterials() {
    uint ret = NativePINVOKE.PxPhysics_getNbMaterials(swigCPtr);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PxMaterial getMaterial(uint index) {
    global::System.IntPtr cPtr = NativePINVOKE.PxPhysics_getMaterial(swigCPtr, index);
    PxMaterial ret = (cPtr == global::System.IntPtr.Zero) ? null : PxMaterial.getWrapper(cPtr, false);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PxPhysicsInsertionCallback getPhysicsInsertionCallback() {
    PxPhysicsInsertionCallback ret = new PxPhysicsInsertionCallback(NativePINVOKE.PxPhysics_getPhysicsInsertionCallback(swigCPtr), false);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool initExtensions(PxPvd pvd) {
    bool ret = NativePINVOKE.PxPhysics_initExtensions__SWIG_0(swigCPtr, PxPvd.getCPtr(pvd));
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool initExtensions() {
    bool ret = NativePINVOKE.PxPhysics_initExtensions__SWIG_1(swigCPtr);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void closeExtensions() {
    NativePINVOKE.PxPhysics_closeExtensions(swigCPtr);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

}

}
