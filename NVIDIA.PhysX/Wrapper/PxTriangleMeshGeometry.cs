//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace NVIDIA.PhysX {

public partial class PxTriangleMeshGeometry : PxGeometry {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal PxTriangleMeshGeometry(global::System.IntPtr cPtr, bool cMemoryOwn) : base(NativePINVOKE.PxTriangleMeshGeometry_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(PxTriangleMeshGeometry obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  public override void destroy() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          NativePINVOKE.delete_PxTriangleMeshGeometry(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.destroy();
    }
  }

  public PxTriangleMeshGeometry() : this(NativePINVOKE.new_PxTriangleMeshGeometry__SWIG_0(), true) {
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public PxTriangleMeshGeometry(PxTriangleMesh mesh, PxMeshScale scaling) : this(NativePINVOKE.new_PxTriangleMeshGeometry__SWIG_1(PxTriangleMesh.getCPtr(mesh), PxMeshScale.getCPtr(scaling)), true) {
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public PxTriangleMeshGeometry(PxTriangleMesh mesh) : this(NativePINVOKE.new_PxTriangleMeshGeometry__SWIG_2(PxTriangleMesh.getCPtr(mesh)), true) {
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool isValid() {
    bool ret = NativePINVOKE.PxTriangleMeshGeometry_isValid(swigCPtr);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PxMeshScale scale {
    set {
      NativePINVOKE.PxTriangleMeshGeometry_scale_set(swigCPtr, PxMeshScale.getCPtr(value));
      if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = NativePINVOKE.PxTriangleMeshGeometry_scale_get(swigCPtr);
      PxMeshScale ret = (cPtr == global::System.IntPtr.Zero) ? null : new PxMeshScale(cPtr, false);
      if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public PxMeshGeometryFlag meshFlags {
    set {
      NativePINVOKE.PxTriangleMeshGeometry_meshFlags_set(swigCPtr, (int)value);
      if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      PxMeshGeometryFlag ret = (PxMeshGeometryFlag)NativePINVOKE.PxTriangleMeshGeometry_meshFlags_get(swigCPtr);
      if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public PxTriangleMesh triangleMesh {
    set {
      NativePINVOKE.PxTriangleMeshGeometry_triangleMesh_set(swigCPtr, PxTriangleMesh.getCPtr(value));
      if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = NativePINVOKE.PxTriangleMeshGeometry_triangleMesh_get(swigCPtr);
      PxTriangleMesh ret = (cPtr == global::System.IntPtr.Zero) ? null : PxTriangleMesh.getWrapper(cPtr, false);
      if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

}

}
